//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.34209
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40818.0
// 
namespace View.Service.File.Writer {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ディレクトリ操作モード", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.File.Writer")]
    public enum ディレクトリ操作モード : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Create = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Delete = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Rename = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="タイプ", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.File.Writer")]
    public enum タイプ : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ディレクトリ = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ファイル = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="掲示板書込タイプ", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.File.Writer")]
    public enum 掲示板書込タイプ : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        新規投稿 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        記事修正 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        返信投稿 = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="文字色", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.File.Writer")]
    public enum 文字色 : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        赤 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        茶色 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        緑 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        青 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        紫 = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ピンク = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        オレンジ = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        黒 = 7,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="掲示板結果リターンEntity", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.File.Writer")]
    public partial class 掲示板結果リターンEntity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string エラーメッセージField;
        
        private string 書込みカテゴリField;
        
        private string 書込み記事NoField;
        
        private bool 書込成功かField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string エラーメッセージ {
            get {
                return this.エラーメッセージField;
            }
            set {
                if ((object.ReferenceEquals(this.エラーメッセージField, value) != true)) {
                    this.エラーメッセージField = value;
                    this.RaisePropertyChanged("エラーメッセージ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 書込みカテゴリ {
            get {
                return this.書込みカテゴリField;
            }
            set {
                if ((object.ReferenceEquals(this.書込みカテゴリField, value) != true)) {
                    this.書込みカテゴリField = value;
                    this.RaisePropertyChanged("書込みカテゴリ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 書込み記事No {
            get {
                return this.書込み記事NoField;
            }
            set {
                if ((object.ReferenceEquals(this.書込み記事NoField, value) != true)) {
                    this.書込み記事NoField = value;
                    this.RaisePropertyChanged("書込み記事No");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool 書込成功か {
            get {
                return this.書込成功かField;
            }
            set {
                if ((this.書込成功かField.Equals(value) != true)) {
                    this.書込成功かField = value;
                    this.RaisePropertyChanged("書込成功か");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="画像種類Enum", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.File.Writer")]
    public enum 画像種類Enum : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        画像なし = -1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        home = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        book1 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        kinds1 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        folder2 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        cross = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        exclame = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="スレッド操作タイプ", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.File.Writer")]
    public enum スレッド操作タイプ : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        新規 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        修正 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        削除 = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.File.Writer.IFileWriter")]
    public interface IFileWriter {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileWriter/FileWriter実行", ReplyAction="http://tempuri.org/IFileWriter/FileWriter実行Response")]
        System.IAsyncResult BeginFileWriter実行(string SendPath, View.Service.File.Writer.ディレクトリ操作モード mode, View.Service.File.Writer.タイプ type, string NewName, System.AsyncCallback callback, object asyncState);
        
        string EndFileWriter実行(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileWriter/掲示板データ書込", ReplyAction="http://tempuri.org/IFileWriter/掲示板データ書込Response")]
        System.IAsyncResult Begin掲示板データ書込(string カテゴリ名, string タイトル, string 投稿者, string 記事, View.Service.File.Writer.掲示板書込タイプ タイプ, string 記事No, string HomepageUrl, string Email, System.Collections.ObjectModel.ObservableCollection<string> 添付画像パスリスト, string 暗証キー, View.Service.File.Writer.文字色 文字色, System.AsyncCallback callback, object asyncState);
        
        View.Service.File.Writer.掲示板結果リターンEntity End掲示板データ書込(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileWriter/掲示板データ削除", ReplyAction="http://tempuri.org/IFileWriter/掲示板データ削除Response")]
        System.IAsyncResult Begin掲示板データ削除(string カテゴリ名, string 記事No, string 暗証キー, bool 管理者か, System.AsyncCallback callback, object asyncState);
        
        string End掲示板データ削除(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileWriter/WriteThreadTitles", ReplyAction="http://tempuri.org/IFileWriter/WriteThreadTitlesResponse")]
        System.IAsyncResult BeginWriteThreadTitles(string InputThreadName, View.Service.File.Writer.画像種類Enum 画像種類, View.Service.File.Writer.スレッド操作タイプ 操作タイプ, string SourceName, System.AsyncCallback callback, object asyncState);
        
        string EndWriteThreadTitles(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileWriter/テロップ変更実行", ReplyAction="http://tempuri.org/IFileWriter/テロップ変更実行Response")]
        System.IAsyncResult Beginテロップ変更実行(string テロップ記事, System.AsyncCallback callback, object asyncState);
        
        string Endテロップ変更実行(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileWriterChannel : View.Service.File.Writer.IFileWriter, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileWriter実行CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FileWriter実行CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class 掲示板データ書込CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public 掲示板データ書込CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public View.Service.File.Writer.掲示板結果リターンEntity Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((View.Service.File.Writer.掲示板結果リターンEntity)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class 掲示板データ削除CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public 掲示板データ削除CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WriteThreadTitlesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public WriteThreadTitlesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class テロップ変更実行CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public テロップ変更実行CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileWriterClient : System.ServiceModel.ClientBase<View.Service.File.Writer.IFileWriter>, View.Service.File.Writer.IFileWriter {
        
        private BeginOperationDelegate onBeginFileWriter実行Delegate;
        
        private EndOperationDelegate onEndFileWriter実行Delegate;
        
        private System.Threading.SendOrPostCallback onFileWriter実行CompletedDelegate;
        
        private BeginOperationDelegate onBegin掲示板データ書込Delegate;
        
        private EndOperationDelegate onEnd掲示板データ書込Delegate;
        
        private System.Threading.SendOrPostCallback on掲示板データ書込CompletedDelegate;
        
        private BeginOperationDelegate onBegin掲示板データ削除Delegate;
        
        private EndOperationDelegate onEnd掲示板データ削除Delegate;
        
        private System.Threading.SendOrPostCallback on掲示板データ削除CompletedDelegate;
        
        private BeginOperationDelegate onBeginWriteThreadTitlesDelegate;
        
        private EndOperationDelegate onEndWriteThreadTitlesDelegate;
        
        private System.Threading.SendOrPostCallback onWriteThreadTitlesCompletedDelegate;
        
        private BeginOperationDelegate onBeginテロップ変更実行Delegate;
        
        private EndOperationDelegate onEndテロップ変更実行Delegate;
        
        private System.Threading.SendOrPostCallback onテロップ変更実行CompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public FileWriterClient() {
        }
        
        public FileWriterClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileWriterClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileWriterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileWriterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("CookieContainer を設定できません。バインドに HttpCookieContainerBindingElement が含まれていることを確認してくだ" +
                            "さい。");
                }
            }
        }
        
        public event System.EventHandler<FileWriter実行CompletedEventArgs> FileWriter実行Completed;
        
        public event System.EventHandler<掲示板データ書込CompletedEventArgs> 掲示板データ書込Completed;
        
        public event System.EventHandler<掲示板データ削除CompletedEventArgs> 掲示板データ削除Completed;
        
        public event System.EventHandler<WriteThreadTitlesCompletedEventArgs> WriteThreadTitlesCompleted;
        
        public event System.EventHandler<テロップ変更実行CompletedEventArgs> テロップ変更実行Completed;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult View.Service.File.Writer.IFileWriter.BeginFileWriter実行(string SendPath, View.Service.File.Writer.ディレクトリ操作モード mode, View.Service.File.Writer.タイプ type, string NewName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFileWriter実行(SendPath, mode, type, NewName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string View.Service.File.Writer.IFileWriter.EndFileWriter実行(System.IAsyncResult result) {
            return base.Channel.EndFileWriter実行(result);
        }
        
        private System.IAsyncResult OnBeginFileWriter実行(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SendPath = ((string)(inValues[0]));
            View.Service.File.Writer.ディレクトリ操作モード mode = ((View.Service.File.Writer.ディレクトリ操作モード)(inValues[1]));
            View.Service.File.Writer.タイプ type = ((View.Service.File.Writer.タイプ)(inValues[2]));
            string NewName = ((string)(inValues[3]));
            return ((View.Service.File.Writer.IFileWriter)(this)).BeginFileWriter実行(SendPath, mode, type, NewName, callback, asyncState);
        }
        
        private object[] OnEndFileWriter実行(System.IAsyncResult result) {
            string retVal = ((View.Service.File.Writer.IFileWriter)(this)).EndFileWriter実行(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFileWriter実行Completed(object state) {
            if ((this.FileWriter実行Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FileWriter実行Completed(this, new FileWriter実行CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FileWriter実行Async(string SendPath, View.Service.File.Writer.ディレクトリ操作モード mode, View.Service.File.Writer.タイプ type, string NewName) {
            this.FileWriter実行Async(SendPath, mode, type, NewName, null);
        }
        
        public void FileWriter実行Async(string SendPath, View.Service.File.Writer.ディレクトリ操作モード mode, View.Service.File.Writer.タイプ type, string NewName, object userState) {
            if ((this.onBeginFileWriter実行Delegate == null)) {
                this.onBeginFileWriter実行Delegate = new BeginOperationDelegate(this.OnBeginFileWriter実行);
            }
            if ((this.onEndFileWriter実行Delegate == null)) {
                this.onEndFileWriter実行Delegate = new EndOperationDelegate(this.OnEndFileWriter実行);
            }
            if ((this.onFileWriter実行CompletedDelegate == null)) {
                this.onFileWriter実行CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFileWriter実行Completed);
            }
            base.InvokeAsync(this.onBeginFileWriter実行Delegate, new object[] {
                        SendPath,
                        mode,
                        type,
                        NewName}, this.onEndFileWriter実行Delegate, this.onFileWriter実行CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult View.Service.File.Writer.IFileWriter.Begin掲示板データ書込(string カテゴリ名, string タイトル, string 投稿者, string 記事, View.Service.File.Writer.掲示板書込タイプ タイプ, string 記事No, string HomepageUrl, string Email, System.Collections.ObjectModel.ObservableCollection<string> 添付画像パスリスト, string 暗証キー, View.Service.File.Writer.文字色 文字色, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Begin掲示板データ書込(カテゴリ名, タイトル, 投稿者, 記事, タイプ, 記事No, HomepageUrl, Email, 添付画像パスリスト, 暗証キー, 文字色, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        View.Service.File.Writer.掲示板結果リターンEntity View.Service.File.Writer.IFileWriter.End掲示板データ書込(System.IAsyncResult result) {
            return base.Channel.End掲示板データ書込(result);
        }
        
        private System.IAsyncResult OnBegin掲示板データ書込(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string カテゴリ名 = ((string)(inValues[0]));
            string タイトル = ((string)(inValues[1]));
            string 投稿者 = ((string)(inValues[2]));
            string 記事 = ((string)(inValues[3]));
            View.Service.File.Writer.掲示板書込タイプ タイプ = ((View.Service.File.Writer.掲示板書込タイプ)(inValues[4]));
            string 記事No = ((string)(inValues[5]));
            string HomepageUrl = ((string)(inValues[6]));
            string Email = ((string)(inValues[7]));
            System.Collections.ObjectModel.ObservableCollection<string> 添付画像パスリスト = ((System.Collections.ObjectModel.ObservableCollection<string>)(inValues[8]));
            string 暗証キー = ((string)(inValues[9]));
            View.Service.File.Writer.文字色 文字色 = ((View.Service.File.Writer.文字色)(inValues[10]));
            return ((View.Service.File.Writer.IFileWriter)(this)).Begin掲示板データ書込(カテゴリ名, タイトル, 投稿者, 記事, タイプ, 記事No, HomepageUrl, Email, 添付画像パスリスト, 暗証キー, 文字色, callback, asyncState);
        }
        
        private object[] OnEnd掲示板データ書込(System.IAsyncResult result) {
            View.Service.File.Writer.掲示板結果リターンEntity retVal = ((View.Service.File.Writer.IFileWriter)(this)).End掲示板データ書込(result);
            return new object[] {
                    retVal};
        }
        
        private void On掲示板データ書込Completed(object state) {
            if ((this.掲示板データ書込Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.掲示板データ書込Completed(this, new 掲示板データ書込CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void 掲示板データ書込Async(string カテゴリ名, string タイトル, string 投稿者, string 記事, View.Service.File.Writer.掲示板書込タイプ タイプ, string 記事No, string HomepageUrl, string Email, System.Collections.ObjectModel.ObservableCollection<string> 添付画像パスリスト, string 暗証キー, View.Service.File.Writer.文字色 文字色) {
            this.掲示板データ書込Async(カテゴリ名, タイトル, 投稿者, 記事, タイプ, 記事No, HomepageUrl, Email, 添付画像パスリスト, 暗証キー, 文字色, null);
        }
        
        public void 掲示板データ書込Async(string カテゴリ名, string タイトル, string 投稿者, string 記事, View.Service.File.Writer.掲示板書込タイプ タイプ, string 記事No, string HomepageUrl, string Email, System.Collections.ObjectModel.ObservableCollection<string> 添付画像パスリスト, string 暗証キー, View.Service.File.Writer.文字色 文字色, object userState) {
            if ((this.onBegin掲示板データ書込Delegate == null)) {
                this.onBegin掲示板データ書込Delegate = new BeginOperationDelegate(this.OnBegin掲示板データ書込);
            }
            if ((this.onEnd掲示板データ書込Delegate == null)) {
                this.onEnd掲示板データ書込Delegate = new EndOperationDelegate(this.OnEnd掲示板データ書込);
            }
            if ((this.on掲示板データ書込CompletedDelegate == null)) {
                this.on掲示板データ書込CompletedDelegate = new System.Threading.SendOrPostCallback(this.On掲示板データ書込Completed);
            }
            base.InvokeAsync(this.onBegin掲示板データ書込Delegate, new object[] {
                        カテゴリ名,
                        タイトル,
                        投稿者,
                        記事,
                        タイプ,
                        記事No,
                        HomepageUrl,
                        Email,
                        添付画像パスリスト,
                        暗証キー,
                        文字色}, this.onEnd掲示板データ書込Delegate, this.on掲示板データ書込CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult View.Service.File.Writer.IFileWriter.Begin掲示板データ削除(string カテゴリ名, string 記事No, string 暗証キー, bool 管理者か, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Begin掲示板データ削除(カテゴリ名, 記事No, 暗証キー, 管理者か, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string View.Service.File.Writer.IFileWriter.End掲示板データ削除(System.IAsyncResult result) {
            return base.Channel.End掲示板データ削除(result);
        }
        
        private System.IAsyncResult OnBegin掲示板データ削除(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string カテゴリ名 = ((string)(inValues[0]));
            string 記事No = ((string)(inValues[1]));
            string 暗証キー = ((string)(inValues[2]));
            bool 管理者か = ((bool)(inValues[3]));
            return ((View.Service.File.Writer.IFileWriter)(this)).Begin掲示板データ削除(カテゴリ名, 記事No, 暗証キー, 管理者か, callback, asyncState);
        }
        
        private object[] OnEnd掲示板データ削除(System.IAsyncResult result) {
            string retVal = ((View.Service.File.Writer.IFileWriter)(this)).End掲示板データ削除(result);
            return new object[] {
                    retVal};
        }
        
        private void On掲示板データ削除Completed(object state) {
            if ((this.掲示板データ削除Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.掲示板データ削除Completed(this, new 掲示板データ削除CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void 掲示板データ削除Async(string カテゴリ名, string 記事No, string 暗証キー, bool 管理者か) {
            this.掲示板データ削除Async(カテゴリ名, 記事No, 暗証キー, 管理者か, null);
        }
        
        public void 掲示板データ削除Async(string カテゴリ名, string 記事No, string 暗証キー, bool 管理者か, object userState) {
            if ((this.onBegin掲示板データ削除Delegate == null)) {
                this.onBegin掲示板データ削除Delegate = new BeginOperationDelegate(this.OnBegin掲示板データ削除);
            }
            if ((this.onEnd掲示板データ削除Delegate == null)) {
                this.onEnd掲示板データ削除Delegate = new EndOperationDelegate(this.OnEnd掲示板データ削除);
            }
            if ((this.on掲示板データ削除CompletedDelegate == null)) {
                this.on掲示板データ削除CompletedDelegate = new System.Threading.SendOrPostCallback(this.On掲示板データ削除Completed);
            }
            base.InvokeAsync(this.onBegin掲示板データ削除Delegate, new object[] {
                        カテゴリ名,
                        記事No,
                        暗証キー,
                        管理者か}, this.onEnd掲示板データ削除Delegate, this.on掲示板データ削除CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult View.Service.File.Writer.IFileWriter.BeginWriteThreadTitles(string InputThreadName, View.Service.File.Writer.画像種類Enum 画像種類, View.Service.File.Writer.スレッド操作タイプ 操作タイプ, string SourceName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginWriteThreadTitles(InputThreadName, 画像種類, 操作タイプ, SourceName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string View.Service.File.Writer.IFileWriter.EndWriteThreadTitles(System.IAsyncResult result) {
            return base.Channel.EndWriteThreadTitles(result);
        }
        
        private System.IAsyncResult OnBeginWriteThreadTitles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string InputThreadName = ((string)(inValues[0]));
            View.Service.File.Writer.画像種類Enum 画像種類 = ((View.Service.File.Writer.画像種類Enum)(inValues[1]));
            View.Service.File.Writer.スレッド操作タイプ 操作タイプ = ((View.Service.File.Writer.スレッド操作タイプ)(inValues[2]));
            string SourceName = ((string)(inValues[3]));
            return ((View.Service.File.Writer.IFileWriter)(this)).BeginWriteThreadTitles(InputThreadName, 画像種類, 操作タイプ, SourceName, callback, asyncState);
        }
        
        private object[] OnEndWriteThreadTitles(System.IAsyncResult result) {
            string retVal = ((View.Service.File.Writer.IFileWriter)(this)).EndWriteThreadTitles(result);
            return new object[] {
                    retVal};
        }
        
        private void OnWriteThreadTitlesCompleted(object state) {
            if ((this.WriteThreadTitlesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.WriteThreadTitlesCompleted(this, new WriteThreadTitlesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void WriteThreadTitlesAsync(string InputThreadName, View.Service.File.Writer.画像種類Enum 画像種類, View.Service.File.Writer.スレッド操作タイプ 操作タイプ, string SourceName) {
            this.WriteThreadTitlesAsync(InputThreadName, 画像種類, 操作タイプ, SourceName, null);
        }
        
        public void WriteThreadTitlesAsync(string InputThreadName, View.Service.File.Writer.画像種類Enum 画像種類, View.Service.File.Writer.スレッド操作タイプ 操作タイプ, string SourceName, object userState) {
            if ((this.onBeginWriteThreadTitlesDelegate == null)) {
                this.onBeginWriteThreadTitlesDelegate = new BeginOperationDelegate(this.OnBeginWriteThreadTitles);
            }
            if ((this.onEndWriteThreadTitlesDelegate == null)) {
                this.onEndWriteThreadTitlesDelegate = new EndOperationDelegate(this.OnEndWriteThreadTitles);
            }
            if ((this.onWriteThreadTitlesCompletedDelegate == null)) {
                this.onWriteThreadTitlesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnWriteThreadTitlesCompleted);
            }
            base.InvokeAsync(this.onBeginWriteThreadTitlesDelegate, new object[] {
                        InputThreadName,
                        画像種類,
                        操作タイプ,
                        SourceName}, this.onEndWriteThreadTitlesDelegate, this.onWriteThreadTitlesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult View.Service.File.Writer.IFileWriter.Beginテロップ変更実行(string テロップ記事, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Beginテロップ変更実行(テロップ記事, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string View.Service.File.Writer.IFileWriter.Endテロップ変更実行(System.IAsyncResult result) {
            return base.Channel.Endテロップ変更実行(result);
        }
        
        private System.IAsyncResult OnBeginテロップ変更実行(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string テロップ記事 = ((string)(inValues[0]));
            return ((View.Service.File.Writer.IFileWriter)(this)).Beginテロップ変更実行(テロップ記事, callback, asyncState);
        }
        
        private object[] OnEndテロップ変更実行(System.IAsyncResult result) {
            string retVal = ((View.Service.File.Writer.IFileWriter)(this)).Endテロップ変更実行(result);
            return new object[] {
                    retVal};
        }
        
        private void Onテロップ変更実行Completed(object state) {
            if ((this.テロップ変更実行Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.テロップ変更実行Completed(this, new テロップ変更実行CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void テロップ変更実行Async(string テロップ記事) {
            this.テロップ変更実行Async(テロップ記事, null);
        }
        
        public void テロップ変更実行Async(string テロップ記事, object userState) {
            if ((this.onBeginテロップ変更実行Delegate == null)) {
                this.onBeginテロップ変更実行Delegate = new BeginOperationDelegate(this.OnBeginテロップ変更実行);
            }
            if ((this.onEndテロップ変更実行Delegate == null)) {
                this.onEndテロップ変更実行Delegate = new EndOperationDelegate(this.OnEndテロップ変更実行);
            }
            if ((this.onテロップ変更実行CompletedDelegate == null)) {
                this.onテロップ変更実行CompletedDelegate = new System.Threading.SendOrPostCallback(this.Onテロップ変更実行Completed);
            }
            base.InvokeAsync(this.onBeginテロップ変更実行Delegate, new object[] {
                        テロップ記事}, this.onEndテロップ変更実行Delegate, this.onテロップ変更実行CompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override View.Service.File.Writer.IFileWriter CreateChannel() {
            return new FileWriterClientChannel(this);
        }
        
        private class FileWriterClientChannel : ChannelBase<View.Service.File.Writer.IFileWriter>, View.Service.File.Writer.IFileWriter {
            
            public FileWriterClientChannel(System.ServiceModel.ClientBase<View.Service.File.Writer.IFileWriter> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginFileWriter実行(string SendPath, View.Service.File.Writer.ディレクトリ操作モード mode, View.Service.File.Writer.タイプ type, string NewName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = SendPath;
                _args[1] = mode;
                _args[2] = type;
                _args[3] = NewName;
                System.IAsyncResult _result = base.BeginInvoke("FileWriter実行", _args, callback, asyncState);
                return _result;
            }
            
            public string EndFileWriter実行(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("FileWriter実行", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult Begin掲示板データ書込(string カテゴリ名, string タイトル, string 投稿者, string 記事, View.Service.File.Writer.掲示板書込タイプ タイプ, string 記事No, string HomepageUrl, string Email, System.Collections.ObjectModel.ObservableCollection<string> 添付画像パスリスト, string 暗証キー, View.Service.File.Writer.文字色 文字色, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[11];
                _args[0] = カテゴリ名;
                _args[1] = タイトル;
                _args[2] = 投稿者;
                _args[3] = 記事;
                _args[4] = タイプ;
                _args[5] = 記事No;
                _args[6] = HomepageUrl;
                _args[7] = Email;
                _args[8] = 添付画像パスリスト;
                _args[9] = 暗証キー;
                _args[10] = 文字色;
                System.IAsyncResult _result = base.BeginInvoke("掲示板データ書込", _args, callback, asyncState);
                return _result;
            }
            
            public View.Service.File.Writer.掲示板結果リターンEntity End掲示板データ書込(System.IAsyncResult result) {
                object[] _args = new object[0];
                View.Service.File.Writer.掲示板結果リターンEntity _result = ((View.Service.File.Writer.掲示板結果リターンEntity)(base.EndInvoke("掲示板データ書込", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult Begin掲示板データ削除(string カテゴリ名, string 記事No, string 暗証キー, bool 管理者か, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = カテゴリ名;
                _args[1] = 記事No;
                _args[2] = 暗証キー;
                _args[3] = 管理者か;
                System.IAsyncResult _result = base.BeginInvoke("掲示板データ削除", _args, callback, asyncState);
                return _result;
            }
            
            public string End掲示板データ削除(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("掲示板データ削除", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginWriteThreadTitles(string InputThreadName, View.Service.File.Writer.画像種類Enum 画像種類, View.Service.File.Writer.スレッド操作タイプ 操作タイプ, string SourceName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = InputThreadName;
                _args[1] = 画像種類;
                _args[2] = 操作タイプ;
                _args[3] = SourceName;
                System.IAsyncResult _result = base.BeginInvoke("WriteThreadTitles", _args, callback, asyncState);
                return _result;
            }
            
            public string EndWriteThreadTitles(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("WriteThreadTitles", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult Beginテロップ変更実行(string テロップ記事, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = テロップ記事;
                System.IAsyncResult _result = base.BeginInvoke("テロップ変更実行", _args, callback, asyncState);
                return _result;
            }
            
            public string Endテロップ変更実行(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("テロップ変更実行", _args, result)));
                return _result;
            }
        }
    }
}
