//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.34209
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40818.0
// 
namespace View.Service.DAO.PharmacyTool.アクセス数管理 {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="アクセス数取得結果", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.DAO.PharmacyTool" +
        ".%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E6%95%B0%E7%AE%A1%E7%90%86")]
    public partial class アクセス数取得結果 : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int アクセス数Field;
        
        private string エラーメッセージField;
        
        private bool 取得成功かField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int アクセス数 {
            get {
                return this.アクセス数Field;
            }
            set {
                if ((this.アクセス数Field.Equals(value) != true)) {
                    this.アクセス数Field = value;
                    this.RaisePropertyChanged("アクセス数");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string エラーメッセージ {
            get {
                return this.エラーメッセージField;
            }
            set {
                if ((object.ReferenceEquals(this.エラーメッセージField, value) != true)) {
                    this.エラーメッセージField = value;
                    this.RaisePropertyChanged("エラーメッセージ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool 取得成功か {
            get {
                return this.取得成功かField;
            }
            set {
                if ((this.取得成功かField.Equals(value) != true)) {
                    this.取得成功かField = value;
                    this.RaisePropertyChanged("取得成功か");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.DAO.PharmacyTool.アクセス数管理.IAccessManagement")]
    public interface IAccessManagement {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IAccessManagement/Doアクセス数カウントアップ取得", ReplyAction="http://tempuri.org/IAccessManagement/Doアクセス数カウントアップ取得Response")]
        System.IAsyncResult BeginDoアクセス数カウントアップ取得(System.AsyncCallback callback, object asyncState);
        
        View.Service.DAO.PharmacyTool.アクセス数管理.アクセス数取得結果 EndDoアクセス数カウントアップ取得(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccessManagementChannel : View.Service.DAO.PharmacyTool.アクセス数管理.IAccessManagement, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Doアクセス数カウントアップ取得CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Doアクセス数カウントアップ取得CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public View.Service.DAO.PharmacyTool.アクセス数管理.アクセス数取得結果 Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((View.Service.DAO.PharmacyTool.アクセス数管理.アクセス数取得結果)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccessManagementClient : System.ServiceModel.ClientBase<View.Service.DAO.PharmacyTool.アクセス数管理.IAccessManagement>, View.Service.DAO.PharmacyTool.アクセス数管理.IAccessManagement {
        
        private BeginOperationDelegate onBeginDoアクセス数カウントアップ取得Delegate;
        
        private EndOperationDelegate onEndDoアクセス数カウントアップ取得Delegate;
        
        private System.Threading.SendOrPostCallback onDoアクセス数カウントアップ取得CompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public AccessManagementClient() {
        }
        
        public AccessManagementClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccessManagementClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccessManagementClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccessManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("CookieContainer を設定できません。バインドに HttpCookieContainerBindingElement が含まれていることを確認してくだ" +
                            "さい。");
                }
            }
        }
        
        public event System.EventHandler<Doアクセス数カウントアップ取得CompletedEventArgs> Doアクセス数カウントアップ取得Completed;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult View.Service.DAO.PharmacyTool.アクセス数管理.IAccessManagement.BeginDoアクセス数カウントアップ取得(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoアクセス数カウントアップ取得(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        View.Service.DAO.PharmacyTool.アクセス数管理.アクセス数取得結果 View.Service.DAO.PharmacyTool.アクセス数管理.IAccessManagement.EndDoアクセス数カウントアップ取得(System.IAsyncResult result) {
            return base.Channel.EndDoアクセス数カウントアップ取得(result);
        }
        
        private System.IAsyncResult OnBeginDoアクセス数カウントアップ取得(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((View.Service.DAO.PharmacyTool.アクセス数管理.IAccessManagement)(this)).BeginDoアクセス数カウントアップ取得(callback, asyncState);
        }
        
        private object[] OnEndDoアクセス数カウントアップ取得(System.IAsyncResult result) {
            View.Service.DAO.PharmacyTool.アクセス数管理.アクセス数取得結果 retVal = ((View.Service.DAO.PharmacyTool.アクセス数管理.IAccessManagement)(this)).EndDoアクセス数カウントアップ取得(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDoアクセス数カウントアップ取得Completed(object state) {
            if ((this.Doアクセス数カウントアップ取得Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Doアクセス数カウントアップ取得Completed(this, new Doアクセス数カウントアップ取得CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Doアクセス数カウントアップ取得Async() {
            this.Doアクセス数カウントアップ取得Async(null);
        }
        
        public void Doアクセス数カウントアップ取得Async(object userState) {
            if ((this.onBeginDoアクセス数カウントアップ取得Delegate == null)) {
                this.onBeginDoアクセス数カウントアップ取得Delegate = new BeginOperationDelegate(this.OnBeginDoアクセス数カウントアップ取得);
            }
            if ((this.onEndDoアクセス数カウントアップ取得Delegate == null)) {
                this.onEndDoアクセス数カウントアップ取得Delegate = new EndOperationDelegate(this.OnEndDoアクセス数カウントアップ取得);
            }
            if ((this.onDoアクセス数カウントアップ取得CompletedDelegate == null)) {
                this.onDoアクセス数カウントアップ取得CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoアクセス数カウントアップ取得Completed);
            }
            base.InvokeAsync(this.onBeginDoアクセス数カウントアップ取得Delegate, null, this.onEndDoアクセス数カウントアップ取得Delegate, this.onDoアクセス数カウントアップ取得CompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override View.Service.DAO.PharmacyTool.アクセス数管理.IAccessManagement CreateChannel() {
            return new AccessManagementClientChannel(this);
        }
        
        private class AccessManagementClientChannel : ChannelBase<View.Service.DAO.PharmacyTool.アクセス数管理.IAccessManagement>, View.Service.DAO.PharmacyTool.アクセス数管理.IAccessManagement {
            
            public AccessManagementClientChannel(System.ServiceModel.ClientBase<View.Service.DAO.PharmacyTool.アクセス数管理.IAccessManagement> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDoアクセス数カウントアップ取得(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("Doアクセス数カウントアップ取得", _args, callback, asyncState);
                return _result;
            }
            
            public View.Service.DAO.PharmacyTool.アクセス数管理.アクセス数取得結果 EndDoアクセス数カウントアップ取得(System.IAsyncResult result) {
                object[] _args = new object[0];
                View.Service.DAO.PharmacyTool.アクセス数管理.アクセス数取得結果 _result = ((View.Service.DAO.PharmacyTool.アクセス数管理.アクセス数取得結果)(base.EndInvoke("Doアクセス数カウントアップ取得", _args, result)));
                return _result;
            }
        }
    }
}
