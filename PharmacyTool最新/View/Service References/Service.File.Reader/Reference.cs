//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.34209
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40818.0
// 
namespace View.Service.File.Reader {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="現在庫データ", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.File.Reader")]
    public partial class 現在庫データ : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string _名称２Field;
        
        private string レセプト電算処理システムコードField;
        
        private System.DateTime 使用期限Field;
        
        private string 個別医薬品コードField;
        
        private string 医薬品名Field;
        
        private string 医薬品名と名称２連結Field;
        
        private string 在庫数Field;
        
        private string 店名Field;
        
        private string 後発区分Field;
        
        private string 最終更新日時Field;
        
        private string 薬価Field;
        
        private string 製造会社Field;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string _名称２ {
            get {
                return this._名称２Field;
            }
            set {
                if ((object.ReferenceEquals(this._名称２Field, value) != true)) {
                    this._名称２Field = value;
                    this.RaisePropertyChanged("_名称２");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string レセプト電算処理システムコード {
            get {
                return this.レセプト電算処理システムコードField;
            }
            set {
                if ((object.ReferenceEquals(this.レセプト電算処理システムコードField, value) != true)) {
                    this.レセプト電算処理システムコードField = value;
                    this.RaisePropertyChanged("レセプト電算処理システムコード");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime 使用期限 {
            get {
                return this.使用期限Field;
            }
            set {
                if ((this.使用期限Field.Equals(value) != true)) {
                    this.使用期限Field = value;
                    this.RaisePropertyChanged("使用期限");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 個別医薬品コード {
            get {
                return this.個別医薬品コードField;
            }
            set {
                if ((object.ReferenceEquals(this.個別医薬品コードField, value) != true)) {
                    this.個別医薬品コードField = value;
                    this.RaisePropertyChanged("個別医薬品コード");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 医薬品名 {
            get {
                return this.医薬品名Field;
            }
            set {
                if ((object.ReferenceEquals(this.医薬品名Field, value) != true)) {
                    this.医薬品名Field = value;
                    this.RaisePropertyChanged("医薬品名");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 医薬品名と名称２連結 {
            get {
                return this.医薬品名と名称２連結Field;
            }
            set {
                if ((object.ReferenceEquals(this.医薬品名と名称２連結Field, value) != true)) {
                    this.医薬品名と名称２連結Field = value;
                    this.RaisePropertyChanged("医薬品名と名称２連結");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 在庫数 {
            get {
                return this.在庫数Field;
            }
            set {
                if ((object.ReferenceEquals(this.在庫数Field, value) != true)) {
                    this.在庫数Field = value;
                    this.RaisePropertyChanged("在庫数");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 店名 {
            get {
                return this.店名Field;
            }
            set {
                if ((object.ReferenceEquals(this.店名Field, value) != true)) {
                    this.店名Field = value;
                    this.RaisePropertyChanged("店名");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 後発区分 {
            get {
                return this.後発区分Field;
            }
            set {
                if ((object.ReferenceEquals(this.後発区分Field, value) != true)) {
                    this.後発区分Field = value;
                    this.RaisePropertyChanged("後発区分");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 最終更新日時 {
            get {
                return this.最終更新日時Field;
            }
            set {
                if ((object.ReferenceEquals(this.最終更新日時Field, value) != true)) {
                    this.最終更新日時Field = value;
                    this.RaisePropertyChanged("最終更新日時");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 薬価 {
            get {
                return this.薬価Field;
            }
            set {
                if ((object.ReferenceEquals(this.薬価Field, value) != true)) {
                    this.薬価Field = value;
                    this.RaisePropertyChanged("薬価");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 製造会社 {
            get {
                return this.製造会社Field;
            }
            set {
                if ((object.ReferenceEquals(this.製造会社Field, value) != true)) {
                    this.製造会社Field = value;
                    this.RaisePropertyChanged("製造会社");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="在庫リターンデータセットOf薬局使用量データZYtYGqK_P", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.File.Reader")]
    public partial class 在庫リターンデータセットOf薬局使用量データZYtYGqK_P : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string エラーメッセージField;
        
        private string 検索キーワードField;
        
        private System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.薬局使用量データ> 検索結果データlistField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string エラーメッセージ {
            get {
                return this.エラーメッセージField;
            }
            set {
                if ((object.ReferenceEquals(this.エラーメッセージField, value) != true)) {
                    this.エラーメッセージField = value;
                    this.RaisePropertyChanged("エラーメッセージ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 検索キーワード {
            get {
                return this.検索キーワードField;
            }
            set {
                if ((object.ReferenceEquals(this.検索キーワードField, value) != true)) {
                    this.検索キーワードField = value;
                    this.RaisePropertyChanged("検索キーワード");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.薬局使用量データ> 検索結果データlist {
            get {
                return this.検索結果データlistField;
            }
            set {
                if ((object.ReferenceEquals(this.検索結果データlistField, value) != true)) {
                    this.検索結果データlistField = value;
                    this.RaisePropertyChanged("検索結果データlist");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="薬局使用量データ", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.File.Reader")]
    public partial class 薬局使用量データ : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string 使用年月Field;
        
        private string 使用量Field;
        
        private string 医薬品名Field;
        
        private string 医薬品名と名称２連結Field;
        
        private string 名称２Field;
        
        private string 商品コードField;
        
        private string 店名Field;
        
        private string 最終更新日時Field;
        
        private string 薬価Field;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 使用年月 {
            get {
                return this.使用年月Field;
            }
            set {
                if ((object.ReferenceEquals(this.使用年月Field, value) != true)) {
                    this.使用年月Field = value;
                    this.RaisePropertyChanged("使用年月");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 使用量 {
            get {
                return this.使用量Field;
            }
            set {
                if ((object.ReferenceEquals(this.使用量Field, value) != true)) {
                    this.使用量Field = value;
                    this.RaisePropertyChanged("使用量");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 医薬品名 {
            get {
                return this.医薬品名Field;
            }
            set {
                if ((object.ReferenceEquals(this.医薬品名Field, value) != true)) {
                    this.医薬品名Field = value;
                    this.RaisePropertyChanged("医薬品名");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 医薬品名と名称２連結 {
            get {
                return this.医薬品名と名称２連結Field;
            }
            set {
                if ((object.ReferenceEquals(this.医薬品名と名称２連結Field, value) != true)) {
                    this.医薬品名と名称２連結Field = value;
                    this.RaisePropertyChanged("医薬品名と名称２連結");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 名称２ {
            get {
                return this.名称２Field;
            }
            set {
                if ((object.ReferenceEquals(this.名称２Field, value) != true)) {
                    this.名称２Field = value;
                    this.RaisePropertyChanged("名称２");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 商品コード {
            get {
                return this.商品コードField;
            }
            set {
                if ((object.ReferenceEquals(this.商品コードField, value) != true)) {
                    this.商品コードField = value;
                    this.RaisePropertyChanged("商品コード");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 店名 {
            get {
                return this.店名Field;
            }
            set {
                if ((object.ReferenceEquals(this.店名Field, value) != true)) {
                    this.店名Field = value;
                    this.RaisePropertyChanged("店名");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 最終更新日時 {
            get {
                return this.最終更新日時Field;
            }
            set {
                if ((object.ReferenceEquals(this.最終更新日時Field, value) != true)) {
                    this.最終更新日時Field = value;
                    this.RaisePropertyChanged("最終更新日時");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 薬価 {
            get {
                return this.薬価Field;
            }
            set {
                if ((object.ReferenceEquals(this.薬価Field, value) != true)) {
                    this.薬価Field = value;
                    this.RaisePropertyChanged("薬価");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="在庫リターンデータセットOf不動品データZYtYGqK_P", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.File.Reader")]
    public partial class 在庫リターンデータセットOf不動品データZYtYGqK_P : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string エラーメッセージField;
        
        private string 検索キーワードField;
        
        private System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.不動品データ> 検索結果データlistField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string エラーメッセージ {
            get {
                return this.エラーメッセージField;
            }
            set {
                if ((object.ReferenceEquals(this.エラーメッセージField, value) != true)) {
                    this.エラーメッセージField = value;
                    this.RaisePropertyChanged("エラーメッセージ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 検索キーワード {
            get {
                return this.検索キーワードField;
            }
            set {
                if ((object.ReferenceEquals(this.検索キーワードField, value) != true)) {
                    this.検索キーワードField = value;
                    this.RaisePropertyChanged("検索キーワード");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.不動品データ> 検索結果データlist {
            get {
                return this.検索結果データlistField;
            }
            set {
                if ((object.ReferenceEquals(this.検索結果データlistField, value) != true)) {
                    this.検索結果データlistField = value;
                    this.RaisePropertyChanged("検索結果データlist");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="不動品データ", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.File.Reader")]
    public partial class 不動品データ : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string レセプト電算処理システムコードField;
        
        private string 一包単位量Field;
        
        private System.DateTime 使用期限Field;
        
        private string 個別医薬品コードField;
        
        private string 医薬品名Field;
        
        private string 医薬品名と名称２連結Field;
        
        private string 名称２Field;
        
        private string 在庫数Field;
        
        private string 店名Field;
        
        private string 最終更新日時Field;
        
        private double 薬価Field;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string レセプト電算処理システムコード {
            get {
                return this.レセプト電算処理システムコードField;
            }
            set {
                if ((object.ReferenceEquals(this.レセプト電算処理システムコードField, value) != true)) {
                    this.レセプト電算処理システムコードField = value;
                    this.RaisePropertyChanged("レセプト電算処理システムコード");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 一包単位量 {
            get {
                return this.一包単位量Field;
            }
            set {
                if ((object.ReferenceEquals(this.一包単位量Field, value) != true)) {
                    this.一包単位量Field = value;
                    this.RaisePropertyChanged("一包単位量");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime 使用期限 {
            get {
                return this.使用期限Field;
            }
            set {
                if ((this.使用期限Field.Equals(value) != true)) {
                    this.使用期限Field = value;
                    this.RaisePropertyChanged("使用期限");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 個別医薬品コード {
            get {
                return this.個別医薬品コードField;
            }
            set {
                if ((object.ReferenceEquals(this.個別医薬品コードField, value) != true)) {
                    this.個別医薬品コードField = value;
                    this.RaisePropertyChanged("個別医薬品コード");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 医薬品名 {
            get {
                return this.医薬品名Field;
            }
            set {
                if ((object.ReferenceEquals(this.医薬品名Field, value) != true)) {
                    this.医薬品名Field = value;
                    this.RaisePropertyChanged("医薬品名");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 医薬品名と名称２連結 {
            get {
                return this.医薬品名と名称２連結Field;
            }
            set {
                if ((object.ReferenceEquals(this.医薬品名と名称２連結Field, value) != true)) {
                    this.医薬品名と名称２連結Field = value;
                    this.RaisePropertyChanged("医薬品名と名称２連結");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 名称２ {
            get {
                return this.名称２Field;
            }
            set {
                if ((object.ReferenceEquals(this.名称２Field, value) != true)) {
                    this.名称２Field = value;
                    this.RaisePropertyChanged("名称２");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 在庫数 {
            get {
                return this.在庫数Field;
            }
            set {
                if ((object.ReferenceEquals(this.在庫数Field, value) != true)) {
                    this.在庫数Field = value;
                    this.RaisePropertyChanged("在庫数");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 店名 {
            get {
                return this.店名Field;
            }
            set {
                if ((object.ReferenceEquals(this.店名Field, value) != true)) {
                    this.店名Field = value;
                    this.RaisePropertyChanged("店名");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 最終更新日時 {
            get {
                return this.最終更新日時Field;
            }
            set {
                if ((object.ReferenceEquals(this.最終更新日時Field, value) != true)) {
                    this.最終更新日時Field = value;
                    this.RaisePropertyChanged("最終更新日時");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double 薬価 {
            get {
                return this.薬価Field;
            }
            set {
                if ((this.薬価Field.Equals(value) != true)) {
                    this.薬価Field = value;
                    this.RaisePropertyChanged("薬価");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="在庫リターンデータセットOf現在庫データZYtYGqK_P", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.File.Reader")]
    public partial class 在庫リターンデータセットOf現在庫データZYtYGqK_P : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string エラーメッセージField;
        
        private string 検索キーワードField;
        
        private System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.現在庫データ> 検索結果データlistField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string エラーメッセージ {
            get {
                return this.エラーメッセージField;
            }
            set {
                if ((object.ReferenceEquals(this.エラーメッセージField, value) != true)) {
                    this.エラーメッセージField = value;
                    this.RaisePropertyChanged("エラーメッセージ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 検索キーワード {
            get {
                return this.検索キーワードField;
            }
            set {
                if ((object.ReferenceEquals(this.検索キーワードField, value) != true)) {
                    this.検索キーワードField = value;
                    this.RaisePropertyChanged("検索キーワード");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.現在庫データ> 検索結果データlist {
            get {
                return this.検索結果データlistField;
            }
            set {
                if ((object.ReferenceEquals(this.検索結果データlistField, value) != true)) {
                    this.検索結果データlistField = value;
                    this.RaisePropertyChanged("検索結果データlist");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="掲示板リターンデータセット", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.File.Reader")]
    public partial class 掲示板リターンデータセット : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string エラーメッセージField;
        
        private bool キーワード検索結果かField;
        
        private int メイン記事数Field;
        
        private int 作成グループNoField;
        
        private System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.Dictionary<View.Service.File.Reader.投稿Entity, System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.返信Entity>>> 掲示板データField;
        
        private string 検索したキーワードField;
        
        private bool 記事取得成功かField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string エラーメッセージ {
            get {
                return this.エラーメッセージField;
            }
            set {
                if ((object.ReferenceEquals(this.エラーメッセージField, value) != true)) {
                    this.エラーメッセージField = value;
                    this.RaisePropertyChanged("エラーメッセージ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool キーワード検索結果か {
            get {
                return this.キーワード検索結果かField;
            }
            set {
                if ((this.キーワード検索結果かField.Equals(value) != true)) {
                    this.キーワード検索結果かField = value;
                    this.RaisePropertyChanged("キーワード検索結果か");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int メイン記事数 {
            get {
                return this.メイン記事数Field;
            }
            set {
                if ((this.メイン記事数Field.Equals(value) != true)) {
                    this.メイン記事数Field = value;
                    this.RaisePropertyChanged("メイン記事数");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int 作成グループNo {
            get {
                return this.作成グループNoField;
            }
            set {
                if ((this.作成グループNoField.Equals(value) != true)) {
                    this.作成グループNoField = value;
                    this.RaisePropertyChanged("作成グループNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.Dictionary<View.Service.File.Reader.投稿Entity, System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.返信Entity>>> 掲示板データ {
            get {
                return this.掲示板データField;
            }
            set {
                if ((object.ReferenceEquals(this.掲示板データField, value) != true)) {
                    this.掲示板データField = value;
                    this.RaisePropertyChanged("掲示板データ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 検索したキーワード {
            get {
                return this.検索したキーワードField;
            }
            set {
                if ((object.ReferenceEquals(this.検索したキーワードField, value) != true)) {
                    this.検索したキーワードField = value;
                    this.RaisePropertyChanged("検索したキーワード");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool 記事取得成功か {
            get {
                return this.記事取得成功かField;
            }
            set {
                if ((this.記事取得成功かField.Equals(value) != true)) {
                    this.記事取得成功かField = value;
                    this.RaisePropertyChanged("記事取得成功か");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="投稿Entity", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.File.Reader")]
    public partial class 投稿Entity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string EmailField;
        
        private string HomepageUrlField;
        
        private string NoField;
        
        private string TitleField;
        
        private string カテゴリ名Field;
        
        private string 投稿日Field;
        
        private string 投稿者名Field;
        
        private string 文字色Field;
        
        private string 暗証キーField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> 添付ファイルlistField;
        
        private string 記事Field;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HomepageUrl {
            get {
                return this.HomepageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.HomepageUrlField, value) != true)) {
                    this.HomepageUrlField = value;
                    this.RaisePropertyChanged("HomepageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string No {
            get {
                return this.NoField;
            }
            set {
                if ((object.ReferenceEquals(this.NoField, value) != true)) {
                    this.NoField = value;
                    this.RaisePropertyChanged("No");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string カテゴリ名 {
            get {
                return this.カテゴリ名Field;
            }
            set {
                if ((object.ReferenceEquals(this.カテゴリ名Field, value) != true)) {
                    this.カテゴリ名Field = value;
                    this.RaisePropertyChanged("カテゴリ名");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 投稿日 {
            get {
                return this.投稿日Field;
            }
            set {
                if ((object.ReferenceEquals(this.投稿日Field, value) != true)) {
                    this.投稿日Field = value;
                    this.RaisePropertyChanged("投稿日");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 投稿者名 {
            get {
                return this.投稿者名Field;
            }
            set {
                if ((object.ReferenceEquals(this.投稿者名Field, value) != true)) {
                    this.投稿者名Field = value;
                    this.RaisePropertyChanged("投稿者名");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 文字色 {
            get {
                return this.文字色Field;
            }
            set {
                if ((object.ReferenceEquals(this.文字色Field, value) != true)) {
                    this.文字色Field = value;
                    this.RaisePropertyChanged("文字色");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 暗証キー {
            get {
                return this.暗証キーField;
            }
            set {
                if ((object.ReferenceEquals(this.暗証キーField, value) != true)) {
                    this.暗証キーField = value;
                    this.RaisePropertyChanged("暗証キー");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> 添付ファイルlist {
            get {
                return this.添付ファイルlistField;
            }
            set {
                if ((object.ReferenceEquals(this.添付ファイルlistField, value) != true)) {
                    this.添付ファイルlistField = value;
                    this.RaisePropertyChanged("添付ファイルlist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 記事 {
            get {
                return this.記事Field;
            }
            set {
                if ((object.ReferenceEquals(this.記事Field, value) != true)) {
                    this.記事Field = value;
                    this.RaisePropertyChanged("記事");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="返信Entity", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.File.Reader")]
    public partial class 返信Entity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string EmailField;
        
        private string HomepageUrlField;
        
        private string NoField;
        
        private string TitleField;
        
        private string カテゴリ名Field;
        
        private string 投稿日Field;
        
        private string 投稿者名Field;
        
        private string 文字色Field;
        
        private System.Collections.ObjectModel.ObservableCollection<string> 添付ファイルlistField;
        
        private string 記事Field;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HomepageUrl {
            get {
                return this.HomepageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.HomepageUrlField, value) != true)) {
                    this.HomepageUrlField = value;
                    this.RaisePropertyChanged("HomepageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string No {
            get {
                return this.NoField;
            }
            set {
                if ((object.ReferenceEquals(this.NoField, value) != true)) {
                    this.NoField = value;
                    this.RaisePropertyChanged("No");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string カテゴリ名 {
            get {
                return this.カテゴリ名Field;
            }
            set {
                if ((object.ReferenceEquals(this.カテゴリ名Field, value) != true)) {
                    this.カテゴリ名Field = value;
                    this.RaisePropertyChanged("カテゴリ名");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 投稿日 {
            get {
                return this.投稿日Field;
            }
            set {
                if ((object.ReferenceEquals(this.投稿日Field, value) != true)) {
                    this.投稿日Field = value;
                    this.RaisePropertyChanged("投稿日");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 投稿者名 {
            get {
                return this.投稿者名Field;
            }
            set {
                if ((object.ReferenceEquals(this.投稿者名Field, value) != true)) {
                    this.投稿者名Field = value;
                    this.RaisePropertyChanged("投稿者名");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 文字色 {
            get {
                return this.文字色Field;
            }
            set {
                if ((object.ReferenceEquals(this.文字色Field, value) != true)) {
                    this.文字色Field = value;
                    this.RaisePropertyChanged("文字色");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> 添付ファイルlist {
            get {
                return this.添付ファイルlistField;
            }
            set {
                if ((object.ReferenceEquals(this.添付ファイルlistField, value) != true)) {
                    this.添付ファイルlistField = value;
                    this.RaisePropertyChanged("添付ファイルlist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 記事 {
            get {
                return this.記事Field;
            }
            set {
                if ((object.ReferenceEquals(this.記事Field, value) != true)) {
                    this.記事Field = value;
                    this.RaisePropertyChanged("記事");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="掲示板記事修正確認Entity", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.File.Reader")]
    public partial class 掲示板記事修正確認Entity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string エラーメッセージField;
        
        private bool 暗証キーチェック成功Field;
        
        private View.Service.File.Reader.投稿Entity 記事データField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string エラーメッセージ {
            get {
                return this.エラーメッセージField;
            }
            set {
                if ((object.ReferenceEquals(this.エラーメッセージField, value) != true)) {
                    this.エラーメッセージField = value;
                    this.RaisePropertyChanged("エラーメッセージ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool 暗証キーチェック成功 {
            get {
                return this.暗証キーチェック成功Field;
            }
            set {
                if ((this.暗証キーチェック成功Field.Equals(value) != true)) {
                    this.暗証キーチェック成功Field = value;
                    this.RaisePropertyChanged("暗証キーチェック成功");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public View.Service.File.Reader.投稿Entity 記事データ {
            get {
                return this.記事データField;
            }
            set {
                if ((object.ReferenceEquals(this.記事データField, value) != true)) {
                    this.記事データField = value;
                    this.RaisePropertyChanged("記事データ");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ThreadTitlesEntity", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.File.Reader")]
    public partial class ThreadTitlesEntity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime スレッド作成日Field;
        
        private string スレッド名Field;
        
        private string 画像パスField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime スレッド作成日 {
            get {
                return this.スレッド作成日Field;
            }
            set {
                if ((this.スレッド作成日Field.Equals(value) != true)) {
                    this.スレッド作成日Field = value;
                    this.RaisePropertyChanged("スレッド作成日");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string スレッド名 {
            get {
                return this.スレッド名Field;
            }
            set {
                if ((object.ReferenceEquals(this.スレッド名Field, value) != true)) {
                    this.スレッド名Field = value;
                    this.RaisePropertyChanged("スレッド名");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string 画像パス {
            get {
                return this.画像パスField;
            }
            set {
                if ((object.ReferenceEquals(this.画像パスField, value) != true)) {
                    this.画像パスField = value;
                    this.RaisePropertyChanged("画像パス");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="テロップ記事リターンEntity", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.File.Reader")]
    public partial class テロップ記事リターンEntity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string エラーメッセージField;
        
        private string テロップ記事Field;
        
        private bool 読み込み成功かField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string エラーメッセージ {
            get {
                return this.エラーメッセージField;
            }
            set {
                if ((object.ReferenceEquals(this.エラーメッセージField, value) != true)) {
                    this.エラーメッセージField = value;
                    this.RaisePropertyChanged("エラーメッセージ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string テロップ記事 {
            get {
                return this.テロップ記事Field;
            }
            set {
                if ((object.ReferenceEquals(this.テロップ記事Field, value) != true)) {
                    this.テロップ記事Field = value;
                    this.RaisePropertyChanged("テロップ記事");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool 読み込み成功か {
            get {
                return this.読み込み成功かField;
            }
            set {
                if ((this.読み込み成功かField.Equals(value) != true)) {
                    this.読み込み成功かField = value;
                    this.RaisePropertyChanged("読み込み成功か");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MergeType", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.File.Reader")]
    public enum MergeType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        現在庫 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        使用量 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        不動品 = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="在庫MergeリターンEntity", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.File.Reader")]
    public partial class 在庫MergeリターンEntity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool Merge成功かField;
        
        private string エラーメッセージField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Merge成功か {
            get {
                return this.Merge成功かField;
            }
            set {
                if ((this.Merge成功かField.Equals(value) != true)) {
                    this.Merge成功かField = value;
                    this.RaisePropertyChanged("Merge成功か");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string エラーメッセージ {
            get {
                return this.エラーメッセージField;
            }
            set {
                if ((object.ReferenceEquals(this.エラーメッセージField, value) != true)) {
                    this.エラーメッセージField = value;
                    this.RaisePropertyChanged("エラーメッセージ");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="最終更新日時リターンデータセット", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.File.Reader")]
    public partial class 最終更新日時リターンデータセット : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string MEDIS最終更新日時Field;
        
        private string エラーメッセージField;
        
        private bool データ取得成功かField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MEDIS最終更新日時 {
            get {
                return this.MEDIS最終更新日時Field;
            }
            set {
                if ((object.ReferenceEquals(this.MEDIS最終更新日時Field, value) != true)) {
                    this.MEDIS最終更新日時Field = value;
                    this.RaisePropertyChanged("MEDIS最終更新日時");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string エラーメッセージ {
            get {
                return this.エラーメッセージField;
            }
            set {
                if ((object.ReferenceEquals(this.エラーメッセージField, value) != true)) {
                    this.エラーメッセージField = value;
                    this.RaisePropertyChanged("エラーメッセージ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool データ取得成功か {
            get {
                return this.データ取得成功かField;
            }
            set {
                if ((this.データ取得成功かField.Equals(value) != true)) {
                    this.データ取得成功かField = value;
                    this.RaisePropertyChanged("データ取得成功か");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.File.Reader.IFileReader")]
    public interface IFileReader {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileReader/OpenCSV", ReplyAction="http://tempuri.org/IFileReader/OpenCSVResponse")]
        System.IAsyncResult BeginOpenCSV(string Filepath, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.現在庫データ> EndOpenCSV(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileReader/Open使用量CSV", ReplyAction="http://tempuri.org/IFileReader/Open使用量CSVResponse")]
        System.IAsyncResult BeginOpen使用量CSV(string 検索文字列, bool 全期間, int 期限加算月, System.AsyncCallback callback, object asyncState);
        
        View.Service.File.Reader.在庫リターンデータセットOf薬局使用量データZYtYGqK_P EndOpen使用量CSV(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileReader/Open使用量2CSV", ReplyAction="http://tempuri.org/IFileReader/Open使用量2CSVResponse")]
        System.IAsyncResult BeginOpen使用量2CSV(string 検索文字列, bool 全期間, int 期限加算月, System.AsyncCallback callback, object asyncState);
        
        View.Service.File.Reader.在庫リターンデータセットOf薬局使用量データZYtYGqK_P EndOpen使用量2CSV(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileReader/Open不動品CSV", ReplyAction="http://tempuri.org/IFileReader/Open不動品CSVResponse")]
        System.IAsyncResult BeginOpen不動品CSV(string 検索文字列, bool 全期限, bool 期限内, bool 期限切, bool 期限指定か, bool 以内指定か, int 期限加算月, System.AsyncCallback callback, object asyncState);
        
        View.Service.File.Reader.在庫リターンデータセットOf不動品データZYtYGqK_P EndOpen不動品CSV(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileReader/Get現在庫検索データ", ReplyAction="http://tempuri.org/IFileReader/Get現在庫検索データResponse")]
        System.IAsyncResult BeginGet現在庫検索データ(string 検索ワード, bool 全期限, bool 期限内, bool 期限切, bool 期限指定か, bool 以内指定か, int 期限加算月, System.AsyncCallback callback, object asyncState);
        
        View.Service.File.Reader.在庫リターンデータセットOf現在庫データZYtYGqK_P EndGet現在庫検索データ(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileReader/Get後発品検索データ", ReplyAction="http://tempuri.org/IFileReader/Get後発品検索データResponse")]
        System.IAsyncResult BeginGet後発品検索データ(string YJコード, bool 全期限, bool 期限内, bool 期限切, bool 期限指定か, bool 以内指定か, int 期限加算月, [System.ServiceModel.MessageParameterAttribute(Name="他規格_x30FB_剤形も表示する")] bool 他規格剤形も表示する, System.AsyncCallback callback, object asyncState);
        
        View.Service.File.Reader.在庫リターンデータセットOf現在庫データZYtYGqK_P EndGet後発品検索データ(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileReader/Open掲示板データ", ReplyAction="http://tempuri.org/IFileReader/Open掲示板データResponse")]
        System.IAsyncResult BeginOpen掲示板データ(string カテゴリ名, int グループNo, System.AsyncCallback callback, object asyncState);
        
        View.Service.File.Reader.掲示板リターンデータセット EndOpen掲示板データ(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileReader/Open掲示板データキーワード検索", ReplyAction="http://tempuri.org/IFileReader/Open掲示板データキーワード検索Response")]
        System.IAsyncResult BeginOpen掲示板データキーワード検索(string キーワード, string カテゴリ名, System.AsyncCallback callback, object asyncState);
        
        View.Service.File.Reader.掲示板リターンデータセット EndOpen掲示板データキーワード検索(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileReader/掲示板記事修正確認チェック", ReplyAction="http://tempuri.org/IFileReader/掲示板記事修正確認チェックResponse")]
        System.IAsyncResult Begin掲示板記事修正確認チェック(string カテゴリ名, string 記事No, string 暗証キー, bool 管理者か, System.AsyncCallback callback, object asyncState);
        
        View.Service.File.Reader.掲示板記事修正確認Entity End掲示板記事修正確認チェック(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileReader/GetThreadTitles", ReplyAction="http://tempuri.org/IFileReader/GetThreadTitlesResponse")]
        System.IAsyncResult BeginGetThreadTitles(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.ThreadTitlesEntity> EndGetThreadTitles(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileReader/テロップ記事読み込み", ReplyAction="http://tempuri.org/IFileReader/テロップ記事読み込みResponse")]
        System.IAsyncResult Beginテロップ記事読み込み(System.AsyncCallback callback, object asyncState);
        
        View.Service.File.Reader.テロップ記事リターンEntity Endテロップ記事読み込み(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileReader/DoMerge", ReplyAction="http://tempuri.org/IFileReader/DoMergeResponse")]
        System.IAsyncResult BeginDoMerge(View.Service.File.Reader.MergeType タイプ, System.AsyncCallback callback, object asyncState);
        
        View.Service.File.Reader.在庫MergeリターンEntity EndDoMerge(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileReader/GetMEDISデータ最終更新日時", ReplyAction="http://tempuri.org/IFileReader/GetMEDISデータ最終更新日時Response")]
        System.IAsyncResult BeginGetMEDISデータ最終更新日時(System.AsyncCallback callback, object asyncState);
        
        View.Service.File.Reader.最終更新日時リターンデータセット EndGetMEDISデータ最終更新日時(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileReaderChannel : View.Service.File.Reader.IFileReader, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OpenCSVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OpenCSVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.現在庫データ> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.現在庫データ>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Open使用量CSVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Open使用量CSVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public View.Service.File.Reader.在庫リターンデータセットOf薬局使用量データZYtYGqK_P Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((View.Service.File.Reader.在庫リターンデータセットOf薬局使用量データZYtYGqK_P)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Open使用量2CSVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Open使用量2CSVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public View.Service.File.Reader.在庫リターンデータセットOf薬局使用量データZYtYGqK_P Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((View.Service.File.Reader.在庫リターンデータセットOf薬局使用量データZYtYGqK_P)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Open不動品CSVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Open不動品CSVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public View.Service.File.Reader.在庫リターンデータセットOf不動品データZYtYGqK_P Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((View.Service.File.Reader.在庫リターンデータセットOf不動品データZYtYGqK_P)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Get現在庫検索データCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Get現在庫検索データCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public View.Service.File.Reader.在庫リターンデータセットOf現在庫データZYtYGqK_P Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((View.Service.File.Reader.在庫リターンデータセットOf現在庫データZYtYGqK_P)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Get後発品検索データCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Get後発品検索データCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public View.Service.File.Reader.在庫リターンデータセットOf現在庫データZYtYGqK_P Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((View.Service.File.Reader.在庫リターンデータセットOf現在庫データZYtYGqK_P)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Open掲示板データCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Open掲示板データCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public View.Service.File.Reader.掲示板リターンデータセット Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((View.Service.File.Reader.掲示板リターンデータセット)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Open掲示板データキーワード検索CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Open掲示板データキーワード検索CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public View.Service.File.Reader.掲示板リターンデータセット Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((View.Service.File.Reader.掲示板リターンデータセット)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class 掲示板記事修正確認チェックCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public 掲示板記事修正確認チェックCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public View.Service.File.Reader.掲示板記事修正確認Entity Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((View.Service.File.Reader.掲示板記事修正確認Entity)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetThreadTitlesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetThreadTitlesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.ThreadTitlesEntity> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.ThreadTitlesEntity>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class テロップ記事読み込みCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public テロップ記事読み込みCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public View.Service.File.Reader.テロップ記事リターンEntity Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((View.Service.File.Reader.テロップ記事リターンEntity)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DoMergeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DoMergeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public View.Service.File.Reader.在庫MergeリターンEntity Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((View.Service.File.Reader.在庫MergeリターンEntity)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMEDISデータ最終更新日時CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMEDISデータ最終更新日時CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public View.Service.File.Reader.最終更新日時リターンデータセット Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((View.Service.File.Reader.最終更新日時リターンデータセット)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileReaderClient : System.ServiceModel.ClientBase<View.Service.File.Reader.IFileReader>, View.Service.File.Reader.IFileReader {
        
        private BeginOperationDelegate onBeginOpenCSVDelegate;
        
        private EndOperationDelegate onEndOpenCSVDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCSVCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpen使用量CSVDelegate;
        
        private EndOperationDelegate onEndOpen使用量CSVDelegate;
        
        private System.Threading.SendOrPostCallback onOpen使用量CSVCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpen使用量2CSVDelegate;
        
        private EndOperationDelegate onEndOpen使用量2CSVDelegate;
        
        private System.Threading.SendOrPostCallback onOpen使用量2CSVCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpen不動品CSVDelegate;
        
        private EndOperationDelegate onEndOpen不動品CSVDelegate;
        
        private System.Threading.SendOrPostCallback onOpen不動品CSVCompletedDelegate;
        
        private BeginOperationDelegate onBeginGet現在庫検索データDelegate;
        
        private EndOperationDelegate onEndGet現在庫検索データDelegate;
        
        private System.Threading.SendOrPostCallback onGet現在庫検索データCompletedDelegate;
        
        private BeginOperationDelegate onBeginGet後発品検索データDelegate;
        
        private EndOperationDelegate onEndGet後発品検索データDelegate;
        
        private System.Threading.SendOrPostCallback onGet後発品検索データCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpen掲示板データDelegate;
        
        private EndOperationDelegate onEndOpen掲示板データDelegate;
        
        private System.Threading.SendOrPostCallback onOpen掲示板データCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpen掲示板データキーワード検索Delegate;
        
        private EndOperationDelegate onEndOpen掲示板データキーワード検索Delegate;
        
        private System.Threading.SendOrPostCallback onOpen掲示板データキーワード検索CompletedDelegate;
        
        private BeginOperationDelegate onBegin掲示板記事修正確認チェックDelegate;
        
        private EndOperationDelegate onEnd掲示板記事修正確認チェックDelegate;
        
        private System.Threading.SendOrPostCallback on掲示板記事修正確認チェックCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetThreadTitlesDelegate;
        
        private EndOperationDelegate onEndGetThreadTitlesDelegate;
        
        private System.Threading.SendOrPostCallback onGetThreadTitlesCompletedDelegate;
        
        private BeginOperationDelegate onBeginテロップ記事読み込みDelegate;
        
        private EndOperationDelegate onEndテロップ記事読み込みDelegate;
        
        private System.Threading.SendOrPostCallback onテロップ記事読み込みCompletedDelegate;
        
        private BeginOperationDelegate onBeginDoMergeDelegate;
        
        private EndOperationDelegate onEndDoMergeDelegate;
        
        private System.Threading.SendOrPostCallback onDoMergeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMEDISデータ最終更新日時Delegate;
        
        private EndOperationDelegate onEndGetMEDISデータ最終更新日時Delegate;
        
        private System.Threading.SendOrPostCallback onGetMEDISデータ最終更新日時CompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public FileReaderClient() {
        }
        
        public FileReaderClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileReaderClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileReaderClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileReaderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("CookieContainer を設定できません。バインドに HttpCookieContainerBindingElement が含まれていることを確認してくだ" +
                            "さい。");
                }
            }
        }
        
        public event System.EventHandler<OpenCSVCompletedEventArgs> OpenCSVCompleted;
        
        public event System.EventHandler<Open使用量CSVCompletedEventArgs> Open使用量CSVCompleted;
        
        public event System.EventHandler<Open使用量2CSVCompletedEventArgs> Open使用量2CSVCompleted;
        
        public event System.EventHandler<Open不動品CSVCompletedEventArgs> Open不動品CSVCompleted;
        
        public event System.EventHandler<Get現在庫検索データCompletedEventArgs> Get現在庫検索データCompleted;
        
        public event System.EventHandler<Get後発品検索データCompletedEventArgs> Get後発品検索データCompleted;
        
        public event System.EventHandler<Open掲示板データCompletedEventArgs> Open掲示板データCompleted;
        
        public event System.EventHandler<Open掲示板データキーワード検索CompletedEventArgs> Open掲示板データキーワード検索Completed;
        
        public event System.EventHandler<掲示板記事修正確認チェックCompletedEventArgs> 掲示板記事修正確認チェックCompleted;
        
        public event System.EventHandler<GetThreadTitlesCompletedEventArgs> GetThreadTitlesCompleted;
        
        public event System.EventHandler<テロップ記事読み込みCompletedEventArgs> テロップ記事読み込みCompleted;
        
        public event System.EventHandler<DoMergeCompletedEventArgs> DoMergeCompleted;
        
        public event System.EventHandler<GetMEDISデータ最終更新日時CompletedEventArgs> GetMEDISデータ最終更新日時Completed;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult View.Service.File.Reader.IFileReader.BeginOpenCSV(string Filepath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOpenCSV(Filepath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.現在庫データ> View.Service.File.Reader.IFileReader.EndOpenCSV(System.IAsyncResult result) {
            return base.Channel.EndOpenCSV(result);
        }
        
        private System.IAsyncResult OnBeginOpenCSV(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Filepath = ((string)(inValues[0]));
            return ((View.Service.File.Reader.IFileReader)(this)).BeginOpenCSV(Filepath, callback, asyncState);
        }
        
        private object[] OnEndOpenCSV(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.現在庫データ> retVal = ((View.Service.File.Reader.IFileReader)(this)).EndOpenCSV(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOpenCSVCompleted(object state) {
            if ((this.OpenCSVCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCSVCompleted(this, new OpenCSVCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenCSVAsync(string Filepath) {
            this.OpenCSVAsync(Filepath, null);
        }
        
        public void OpenCSVAsync(string Filepath, object userState) {
            if ((this.onBeginOpenCSVDelegate == null)) {
                this.onBeginOpenCSVDelegate = new BeginOperationDelegate(this.OnBeginOpenCSV);
            }
            if ((this.onEndOpenCSVDelegate == null)) {
                this.onEndOpenCSVDelegate = new EndOperationDelegate(this.OnEndOpenCSV);
            }
            if ((this.onOpenCSVCompletedDelegate == null)) {
                this.onOpenCSVCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCSVCompleted);
            }
            base.InvokeAsync(this.onBeginOpenCSVDelegate, new object[] {
                        Filepath}, this.onEndOpenCSVDelegate, this.onOpenCSVCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult View.Service.File.Reader.IFileReader.BeginOpen使用量CSV(string 検索文字列, bool 全期間, int 期限加算月, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOpen使用量CSV(検索文字列, 全期間, 期限加算月, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        View.Service.File.Reader.在庫リターンデータセットOf薬局使用量データZYtYGqK_P View.Service.File.Reader.IFileReader.EndOpen使用量CSV(System.IAsyncResult result) {
            return base.Channel.EndOpen使用量CSV(result);
        }
        
        private System.IAsyncResult OnBeginOpen使用量CSV(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string 検索文字列 = ((string)(inValues[0]));
            bool 全期間 = ((bool)(inValues[1]));
            int 期限加算月 = ((int)(inValues[2]));
            return ((View.Service.File.Reader.IFileReader)(this)).BeginOpen使用量CSV(検索文字列, 全期間, 期限加算月, callback, asyncState);
        }
        
        private object[] OnEndOpen使用量CSV(System.IAsyncResult result) {
            View.Service.File.Reader.在庫リターンデータセットOf薬局使用量データZYtYGqK_P retVal = ((View.Service.File.Reader.IFileReader)(this)).EndOpen使用量CSV(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOpen使用量CSVCompleted(object state) {
            if ((this.Open使用量CSVCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Open使用量CSVCompleted(this, new Open使用量CSVCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Open使用量CSVAsync(string 検索文字列, bool 全期間, int 期限加算月) {
            this.Open使用量CSVAsync(検索文字列, 全期間, 期限加算月, null);
        }
        
        public void Open使用量CSVAsync(string 検索文字列, bool 全期間, int 期限加算月, object userState) {
            if ((this.onBeginOpen使用量CSVDelegate == null)) {
                this.onBeginOpen使用量CSVDelegate = new BeginOperationDelegate(this.OnBeginOpen使用量CSV);
            }
            if ((this.onEndOpen使用量CSVDelegate == null)) {
                this.onEndOpen使用量CSVDelegate = new EndOperationDelegate(this.OnEndOpen使用量CSV);
            }
            if ((this.onOpen使用量CSVCompletedDelegate == null)) {
                this.onOpen使用量CSVCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpen使用量CSVCompleted);
            }
            base.InvokeAsync(this.onBeginOpen使用量CSVDelegate, new object[] {
                        検索文字列,
                        全期間,
                        期限加算月}, this.onEndOpen使用量CSVDelegate, this.onOpen使用量CSVCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult View.Service.File.Reader.IFileReader.BeginOpen使用量2CSV(string 検索文字列, bool 全期間, int 期限加算月, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOpen使用量2CSV(検索文字列, 全期間, 期限加算月, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        View.Service.File.Reader.在庫リターンデータセットOf薬局使用量データZYtYGqK_P View.Service.File.Reader.IFileReader.EndOpen使用量2CSV(System.IAsyncResult result) {
            return base.Channel.EndOpen使用量2CSV(result);
        }
        
        private System.IAsyncResult OnBeginOpen使用量2CSV(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string 検索文字列 = ((string)(inValues[0]));
            bool 全期間 = ((bool)(inValues[1]));
            int 期限加算月 = ((int)(inValues[2]));
            return ((View.Service.File.Reader.IFileReader)(this)).BeginOpen使用量2CSV(検索文字列, 全期間, 期限加算月, callback, asyncState);
        }
        
        private object[] OnEndOpen使用量2CSV(System.IAsyncResult result) {
            View.Service.File.Reader.在庫リターンデータセットOf薬局使用量データZYtYGqK_P retVal = ((View.Service.File.Reader.IFileReader)(this)).EndOpen使用量2CSV(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOpen使用量2CSVCompleted(object state) {
            if ((this.Open使用量2CSVCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Open使用量2CSVCompleted(this, new Open使用量2CSVCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Open使用量2CSVAsync(string 検索文字列, bool 全期間, int 期限加算月) {
            this.Open使用量2CSVAsync(検索文字列, 全期間, 期限加算月, null);
        }
        
        public void Open使用量2CSVAsync(string 検索文字列, bool 全期間, int 期限加算月, object userState) {
            if ((this.onBeginOpen使用量2CSVDelegate == null)) {
                this.onBeginOpen使用量2CSVDelegate = new BeginOperationDelegate(this.OnBeginOpen使用量2CSV);
            }
            if ((this.onEndOpen使用量2CSVDelegate == null)) {
                this.onEndOpen使用量2CSVDelegate = new EndOperationDelegate(this.OnEndOpen使用量2CSV);
            }
            if ((this.onOpen使用量2CSVCompletedDelegate == null)) {
                this.onOpen使用量2CSVCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpen使用量2CSVCompleted);
            }
            base.InvokeAsync(this.onBeginOpen使用量2CSVDelegate, new object[] {
                        検索文字列,
                        全期間,
                        期限加算月}, this.onEndOpen使用量2CSVDelegate, this.onOpen使用量2CSVCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult View.Service.File.Reader.IFileReader.BeginOpen不動品CSV(string 検索文字列, bool 全期限, bool 期限内, bool 期限切, bool 期限指定か, bool 以内指定か, int 期限加算月, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOpen不動品CSV(検索文字列, 全期限, 期限内, 期限切, 期限指定か, 以内指定か, 期限加算月, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        View.Service.File.Reader.在庫リターンデータセットOf不動品データZYtYGqK_P View.Service.File.Reader.IFileReader.EndOpen不動品CSV(System.IAsyncResult result) {
            return base.Channel.EndOpen不動品CSV(result);
        }
        
        private System.IAsyncResult OnBeginOpen不動品CSV(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string 検索文字列 = ((string)(inValues[0]));
            bool 全期限 = ((bool)(inValues[1]));
            bool 期限内 = ((bool)(inValues[2]));
            bool 期限切 = ((bool)(inValues[3]));
            bool 期限指定か = ((bool)(inValues[4]));
            bool 以内指定か = ((bool)(inValues[5]));
            int 期限加算月 = ((int)(inValues[6]));
            return ((View.Service.File.Reader.IFileReader)(this)).BeginOpen不動品CSV(検索文字列, 全期限, 期限内, 期限切, 期限指定か, 以内指定か, 期限加算月, callback, asyncState);
        }
        
        private object[] OnEndOpen不動品CSV(System.IAsyncResult result) {
            View.Service.File.Reader.在庫リターンデータセットOf不動品データZYtYGqK_P retVal = ((View.Service.File.Reader.IFileReader)(this)).EndOpen不動品CSV(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOpen不動品CSVCompleted(object state) {
            if ((this.Open不動品CSVCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Open不動品CSVCompleted(this, new Open不動品CSVCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Open不動品CSVAsync(string 検索文字列, bool 全期限, bool 期限内, bool 期限切, bool 期限指定か, bool 以内指定か, int 期限加算月) {
            this.Open不動品CSVAsync(検索文字列, 全期限, 期限内, 期限切, 期限指定か, 以内指定か, 期限加算月, null);
        }
        
        public void Open不動品CSVAsync(string 検索文字列, bool 全期限, bool 期限内, bool 期限切, bool 期限指定か, bool 以内指定か, int 期限加算月, object userState) {
            if ((this.onBeginOpen不動品CSVDelegate == null)) {
                this.onBeginOpen不動品CSVDelegate = new BeginOperationDelegate(this.OnBeginOpen不動品CSV);
            }
            if ((this.onEndOpen不動品CSVDelegate == null)) {
                this.onEndOpen不動品CSVDelegate = new EndOperationDelegate(this.OnEndOpen不動品CSV);
            }
            if ((this.onOpen不動品CSVCompletedDelegate == null)) {
                this.onOpen不動品CSVCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpen不動品CSVCompleted);
            }
            base.InvokeAsync(this.onBeginOpen不動品CSVDelegate, new object[] {
                        検索文字列,
                        全期限,
                        期限内,
                        期限切,
                        期限指定か,
                        以内指定か,
                        期限加算月}, this.onEndOpen不動品CSVDelegate, this.onOpen不動品CSVCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult View.Service.File.Reader.IFileReader.BeginGet現在庫検索データ(string 検索ワード, bool 全期限, bool 期限内, bool 期限切, bool 期限指定か, bool 以内指定か, int 期限加算月, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGet現在庫検索データ(検索ワード, 全期限, 期限内, 期限切, 期限指定か, 以内指定か, 期限加算月, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        View.Service.File.Reader.在庫リターンデータセットOf現在庫データZYtYGqK_P View.Service.File.Reader.IFileReader.EndGet現在庫検索データ(System.IAsyncResult result) {
            return base.Channel.EndGet現在庫検索データ(result);
        }
        
        private System.IAsyncResult OnBeginGet現在庫検索データ(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string 検索ワード = ((string)(inValues[0]));
            bool 全期限 = ((bool)(inValues[1]));
            bool 期限内 = ((bool)(inValues[2]));
            bool 期限切 = ((bool)(inValues[3]));
            bool 期限指定か = ((bool)(inValues[4]));
            bool 以内指定か = ((bool)(inValues[5]));
            int 期限加算月 = ((int)(inValues[6]));
            return ((View.Service.File.Reader.IFileReader)(this)).BeginGet現在庫検索データ(検索ワード, 全期限, 期限内, 期限切, 期限指定か, 以内指定か, 期限加算月, callback, asyncState);
        }
        
        private object[] OnEndGet現在庫検索データ(System.IAsyncResult result) {
            View.Service.File.Reader.在庫リターンデータセットOf現在庫データZYtYGqK_P retVal = ((View.Service.File.Reader.IFileReader)(this)).EndGet現在庫検索データ(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGet現在庫検索データCompleted(object state) {
            if ((this.Get現在庫検索データCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Get現在庫検索データCompleted(this, new Get現在庫検索データCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Get現在庫検索データAsync(string 検索ワード, bool 全期限, bool 期限内, bool 期限切, bool 期限指定か, bool 以内指定か, int 期限加算月) {
            this.Get現在庫検索データAsync(検索ワード, 全期限, 期限内, 期限切, 期限指定か, 以内指定か, 期限加算月, null);
        }
        
        public void Get現在庫検索データAsync(string 検索ワード, bool 全期限, bool 期限内, bool 期限切, bool 期限指定か, bool 以内指定か, int 期限加算月, object userState) {
            if ((this.onBeginGet現在庫検索データDelegate == null)) {
                this.onBeginGet現在庫検索データDelegate = new BeginOperationDelegate(this.OnBeginGet現在庫検索データ);
            }
            if ((this.onEndGet現在庫検索データDelegate == null)) {
                this.onEndGet現在庫検索データDelegate = new EndOperationDelegate(this.OnEndGet現在庫検索データ);
            }
            if ((this.onGet現在庫検索データCompletedDelegate == null)) {
                this.onGet現在庫検索データCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGet現在庫検索データCompleted);
            }
            base.InvokeAsync(this.onBeginGet現在庫検索データDelegate, new object[] {
                        検索ワード,
                        全期限,
                        期限内,
                        期限切,
                        期限指定か,
                        以内指定か,
                        期限加算月}, this.onEndGet現在庫検索データDelegate, this.onGet現在庫検索データCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult View.Service.File.Reader.IFileReader.BeginGet後発品検索データ(string YJコード, bool 全期限, bool 期限内, bool 期限切, bool 期限指定か, bool 以内指定か, int 期限加算月, bool 他規格剤形も表示する, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGet後発品検索データ(YJコード, 全期限, 期限内, 期限切, 期限指定か, 以内指定か, 期限加算月, 他規格剤形も表示する, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        View.Service.File.Reader.在庫リターンデータセットOf現在庫データZYtYGqK_P View.Service.File.Reader.IFileReader.EndGet後発品検索データ(System.IAsyncResult result) {
            return base.Channel.EndGet後発品検索データ(result);
        }
        
        private System.IAsyncResult OnBeginGet後発品検索データ(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string YJコード = ((string)(inValues[0]));
            bool 全期限 = ((bool)(inValues[1]));
            bool 期限内 = ((bool)(inValues[2]));
            bool 期限切 = ((bool)(inValues[3]));
            bool 期限指定か = ((bool)(inValues[4]));
            bool 以内指定か = ((bool)(inValues[5]));
            int 期限加算月 = ((int)(inValues[6]));
            bool 他規格剤形も表示する = ((bool)(inValues[7]));
            return ((View.Service.File.Reader.IFileReader)(this)).BeginGet後発品検索データ(YJコード, 全期限, 期限内, 期限切, 期限指定か, 以内指定か, 期限加算月, 他規格剤形も表示する, callback, asyncState);
        }
        
        private object[] OnEndGet後発品検索データ(System.IAsyncResult result) {
            View.Service.File.Reader.在庫リターンデータセットOf現在庫データZYtYGqK_P retVal = ((View.Service.File.Reader.IFileReader)(this)).EndGet後発品検索データ(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGet後発品検索データCompleted(object state) {
            if ((this.Get後発品検索データCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Get後発品検索データCompleted(this, new Get後発品検索データCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Get後発品検索データAsync(string YJコード, bool 全期限, bool 期限内, bool 期限切, bool 期限指定か, bool 以内指定か, int 期限加算月, bool 他規格剤形も表示する) {
            this.Get後発品検索データAsync(YJコード, 全期限, 期限内, 期限切, 期限指定か, 以内指定か, 期限加算月, 他規格剤形も表示する, null);
        }
        
        public void Get後発品検索データAsync(string YJコード, bool 全期限, bool 期限内, bool 期限切, bool 期限指定か, bool 以内指定か, int 期限加算月, bool 他規格剤形も表示する, object userState) {
            if ((this.onBeginGet後発品検索データDelegate == null)) {
                this.onBeginGet後発品検索データDelegate = new BeginOperationDelegate(this.OnBeginGet後発品検索データ);
            }
            if ((this.onEndGet後発品検索データDelegate == null)) {
                this.onEndGet後発品検索データDelegate = new EndOperationDelegate(this.OnEndGet後発品検索データ);
            }
            if ((this.onGet後発品検索データCompletedDelegate == null)) {
                this.onGet後発品検索データCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGet後発品検索データCompleted);
            }
            base.InvokeAsync(this.onBeginGet後発品検索データDelegate, new object[] {
                        YJコード,
                        全期限,
                        期限内,
                        期限切,
                        期限指定か,
                        以内指定か,
                        期限加算月,
                        他規格剤形も表示する}, this.onEndGet後発品検索データDelegate, this.onGet後発品検索データCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult View.Service.File.Reader.IFileReader.BeginOpen掲示板データ(string カテゴリ名, int グループNo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOpen掲示板データ(カテゴリ名, グループNo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        View.Service.File.Reader.掲示板リターンデータセット View.Service.File.Reader.IFileReader.EndOpen掲示板データ(System.IAsyncResult result) {
            return base.Channel.EndOpen掲示板データ(result);
        }
        
        private System.IAsyncResult OnBeginOpen掲示板データ(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string カテゴリ名 = ((string)(inValues[0]));
            int グループNo = ((int)(inValues[1]));
            return ((View.Service.File.Reader.IFileReader)(this)).BeginOpen掲示板データ(カテゴリ名, グループNo, callback, asyncState);
        }
        
        private object[] OnEndOpen掲示板データ(System.IAsyncResult result) {
            View.Service.File.Reader.掲示板リターンデータセット retVal = ((View.Service.File.Reader.IFileReader)(this)).EndOpen掲示板データ(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOpen掲示板データCompleted(object state) {
            if ((this.Open掲示板データCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Open掲示板データCompleted(this, new Open掲示板データCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Open掲示板データAsync(string カテゴリ名, int グループNo) {
            this.Open掲示板データAsync(カテゴリ名, グループNo, null);
        }
        
        public void Open掲示板データAsync(string カテゴリ名, int グループNo, object userState) {
            if ((this.onBeginOpen掲示板データDelegate == null)) {
                this.onBeginOpen掲示板データDelegate = new BeginOperationDelegate(this.OnBeginOpen掲示板データ);
            }
            if ((this.onEndOpen掲示板データDelegate == null)) {
                this.onEndOpen掲示板データDelegate = new EndOperationDelegate(this.OnEndOpen掲示板データ);
            }
            if ((this.onOpen掲示板データCompletedDelegate == null)) {
                this.onOpen掲示板データCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpen掲示板データCompleted);
            }
            base.InvokeAsync(this.onBeginOpen掲示板データDelegate, new object[] {
                        カテゴリ名,
                        グループNo}, this.onEndOpen掲示板データDelegate, this.onOpen掲示板データCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult View.Service.File.Reader.IFileReader.BeginOpen掲示板データキーワード検索(string キーワード, string カテゴリ名, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOpen掲示板データキーワード検索(キーワード, カテゴリ名, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        View.Service.File.Reader.掲示板リターンデータセット View.Service.File.Reader.IFileReader.EndOpen掲示板データキーワード検索(System.IAsyncResult result) {
            return base.Channel.EndOpen掲示板データキーワード検索(result);
        }
        
        private System.IAsyncResult OnBeginOpen掲示板データキーワード検索(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string キーワード = ((string)(inValues[0]));
            string カテゴリ名 = ((string)(inValues[1]));
            return ((View.Service.File.Reader.IFileReader)(this)).BeginOpen掲示板データキーワード検索(キーワード, カテゴリ名, callback, asyncState);
        }
        
        private object[] OnEndOpen掲示板データキーワード検索(System.IAsyncResult result) {
            View.Service.File.Reader.掲示板リターンデータセット retVal = ((View.Service.File.Reader.IFileReader)(this)).EndOpen掲示板データキーワード検索(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOpen掲示板データキーワード検索Completed(object state) {
            if ((this.Open掲示板データキーワード検索Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Open掲示板データキーワード検索Completed(this, new Open掲示板データキーワード検索CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Open掲示板データキーワード検索Async(string キーワード, string カテゴリ名) {
            this.Open掲示板データキーワード検索Async(キーワード, カテゴリ名, null);
        }
        
        public void Open掲示板データキーワード検索Async(string キーワード, string カテゴリ名, object userState) {
            if ((this.onBeginOpen掲示板データキーワード検索Delegate == null)) {
                this.onBeginOpen掲示板データキーワード検索Delegate = new BeginOperationDelegate(this.OnBeginOpen掲示板データキーワード検索);
            }
            if ((this.onEndOpen掲示板データキーワード検索Delegate == null)) {
                this.onEndOpen掲示板データキーワード検索Delegate = new EndOperationDelegate(this.OnEndOpen掲示板データキーワード検索);
            }
            if ((this.onOpen掲示板データキーワード検索CompletedDelegate == null)) {
                this.onOpen掲示板データキーワード検索CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpen掲示板データキーワード検索Completed);
            }
            base.InvokeAsync(this.onBeginOpen掲示板データキーワード検索Delegate, new object[] {
                        キーワード,
                        カテゴリ名}, this.onEndOpen掲示板データキーワード検索Delegate, this.onOpen掲示板データキーワード検索CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult View.Service.File.Reader.IFileReader.Begin掲示板記事修正確認チェック(string カテゴリ名, string 記事No, string 暗証キー, bool 管理者か, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Begin掲示板記事修正確認チェック(カテゴリ名, 記事No, 暗証キー, 管理者か, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        View.Service.File.Reader.掲示板記事修正確認Entity View.Service.File.Reader.IFileReader.End掲示板記事修正確認チェック(System.IAsyncResult result) {
            return base.Channel.End掲示板記事修正確認チェック(result);
        }
        
        private System.IAsyncResult OnBegin掲示板記事修正確認チェック(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string カテゴリ名 = ((string)(inValues[0]));
            string 記事No = ((string)(inValues[1]));
            string 暗証キー = ((string)(inValues[2]));
            bool 管理者か = ((bool)(inValues[3]));
            return ((View.Service.File.Reader.IFileReader)(this)).Begin掲示板記事修正確認チェック(カテゴリ名, 記事No, 暗証キー, 管理者か, callback, asyncState);
        }
        
        private object[] OnEnd掲示板記事修正確認チェック(System.IAsyncResult result) {
            View.Service.File.Reader.掲示板記事修正確認Entity retVal = ((View.Service.File.Reader.IFileReader)(this)).End掲示板記事修正確認チェック(result);
            return new object[] {
                    retVal};
        }
        
        private void On掲示板記事修正確認チェックCompleted(object state) {
            if ((this.掲示板記事修正確認チェックCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.掲示板記事修正確認チェックCompleted(this, new 掲示板記事修正確認チェックCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void 掲示板記事修正確認チェックAsync(string カテゴリ名, string 記事No, string 暗証キー, bool 管理者か) {
            this.掲示板記事修正確認チェックAsync(カテゴリ名, 記事No, 暗証キー, 管理者か, null);
        }
        
        public void 掲示板記事修正確認チェックAsync(string カテゴリ名, string 記事No, string 暗証キー, bool 管理者か, object userState) {
            if ((this.onBegin掲示板記事修正確認チェックDelegate == null)) {
                this.onBegin掲示板記事修正確認チェックDelegate = new BeginOperationDelegate(this.OnBegin掲示板記事修正確認チェック);
            }
            if ((this.onEnd掲示板記事修正確認チェックDelegate == null)) {
                this.onEnd掲示板記事修正確認チェックDelegate = new EndOperationDelegate(this.OnEnd掲示板記事修正確認チェック);
            }
            if ((this.on掲示板記事修正確認チェックCompletedDelegate == null)) {
                this.on掲示板記事修正確認チェックCompletedDelegate = new System.Threading.SendOrPostCallback(this.On掲示板記事修正確認チェックCompleted);
            }
            base.InvokeAsync(this.onBegin掲示板記事修正確認チェックDelegate, new object[] {
                        カテゴリ名,
                        記事No,
                        暗証キー,
                        管理者か}, this.onEnd掲示板記事修正確認チェックDelegate, this.on掲示板記事修正確認チェックCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult View.Service.File.Reader.IFileReader.BeginGetThreadTitles(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetThreadTitles(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.ThreadTitlesEntity> View.Service.File.Reader.IFileReader.EndGetThreadTitles(System.IAsyncResult result) {
            return base.Channel.EndGetThreadTitles(result);
        }
        
        private System.IAsyncResult OnBeginGetThreadTitles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((View.Service.File.Reader.IFileReader)(this)).BeginGetThreadTitles(callback, asyncState);
        }
        
        private object[] OnEndGetThreadTitles(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.ThreadTitlesEntity> retVal = ((View.Service.File.Reader.IFileReader)(this)).EndGetThreadTitles(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetThreadTitlesCompleted(object state) {
            if ((this.GetThreadTitlesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetThreadTitlesCompleted(this, new GetThreadTitlesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetThreadTitlesAsync() {
            this.GetThreadTitlesAsync(null);
        }
        
        public void GetThreadTitlesAsync(object userState) {
            if ((this.onBeginGetThreadTitlesDelegate == null)) {
                this.onBeginGetThreadTitlesDelegate = new BeginOperationDelegate(this.OnBeginGetThreadTitles);
            }
            if ((this.onEndGetThreadTitlesDelegate == null)) {
                this.onEndGetThreadTitlesDelegate = new EndOperationDelegate(this.OnEndGetThreadTitles);
            }
            if ((this.onGetThreadTitlesCompletedDelegate == null)) {
                this.onGetThreadTitlesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetThreadTitlesCompleted);
            }
            base.InvokeAsync(this.onBeginGetThreadTitlesDelegate, null, this.onEndGetThreadTitlesDelegate, this.onGetThreadTitlesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult View.Service.File.Reader.IFileReader.Beginテロップ記事読み込み(System.AsyncCallback callback, object asyncState) {
            return base.Channel.Beginテロップ記事読み込み(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        View.Service.File.Reader.テロップ記事リターンEntity View.Service.File.Reader.IFileReader.Endテロップ記事読み込み(System.IAsyncResult result) {
            return base.Channel.Endテロップ記事読み込み(result);
        }
        
        private System.IAsyncResult OnBeginテロップ記事読み込み(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((View.Service.File.Reader.IFileReader)(this)).Beginテロップ記事読み込み(callback, asyncState);
        }
        
        private object[] OnEndテロップ記事読み込み(System.IAsyncResult result) {
            View.Service.File.Reader.テロップ記事リターンEntity retVal = ((View.Service.File.Reader.IFileReader)(this)).Endテロップ記事読み込み(result);
            return new object[] {
                    retVal};
        }
        
        private void Onテロップ記事読み込みCompleted(object state) {
            if ((this.テロップ記事読み込みCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.テロップ記事読み込みCompleted(this, new テロップ記事読み込みCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void テロップ記事読み込みAsync() {
            this.テロップ記事読み込みAsync(null);
        }
        
        public void テロップ記事読み込みAsync(object userState) {
            if ((this.onBeginテロップ記事読み込みDelegate == null)) {
                this.onBeginテロップ記事読み込みDelegate = new BeginOperationDelegate(this.OnBeginテロップ記事読み込み);
            }
            if ((this.onEndテロップ記事読み込みDelegate == null)) {
                this.onEndテロップ記事読み込みDelegate = new EndOperationDelegate(this.OnEndテロップ記事読み込み);
            }
            if ((this.onテロップ記事読み込みCompletedDelegate == null)) {
                this.onテロップ記事読み込みCompletedDelegate = new System.Threading.SendOrPostCallback(this.Onテロップ記事読み込みCompleted);
            }
            base.InvokeAsync(this.onBeginテロップ記事読み込みDelegate, null, this.onEndテロップ記事読み込みDelegate, this.onテロップ記事読み込みCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult View.Service.File.Reader.IFileReader.BeginDoMerge(View.Service.File.Reader.MergeType タイプ, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoMerge(タイプ, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        View.Service.File.Reader.在庫MergeリターンEntity View.Service.File.Reader.IFileReader.EndDoMerge(System.IAsyncResult result) {
            return base.Channel.EndDoMerge(result);
        }
        
        private System.IAsyncResult OnBeginDoMerge(object[] inValues, System.AsyncCallback callback, object asyncState) {
            View.Service.File.Reader.MergeType タイプ = ((View.Service.File.Reader.MergeType)(inValues[0]));
            return ((View.Service.File.Reader.IFileReader)(this)).BeginDoMerge(タイプ, callback, asyncState);
        }
        
        private object[] OnEndDoMerge(System.IAsyncResult result) {
            View.Service.File.Reader.在庫MergeリターンEntity retVal = ((View.Service.File.Reader.IFileReader)(this)).EndDoMerge(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDoMergeCompleted(object state) {
            if ((this.DoMergeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoMergeCompleted(this, new DoMergeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoMergeAsync(View.Service.File.Reader.MergeType タイプ) {
            this.DoMergeAsync(タイプ, null);
        }
        
        public void DoMergeAsync(View.Service.File.Reader.MergeType タイプ, object userState) {
            if ((this.onBeginDoMergeDelegate == null)) {
                this.onBeginDoMergeDelegate = new BeginOperationDelegate(this.OnBeginDoMerge);
            }
            if ((this.onEndDoMergeDelegate == null)) {
                this.onEndDoMergeDelegate = new EndOperationDelegate(this.OnEndDoMerge);
            }
            if ((this.onDoMergeCompletedDelegate == null)) {
                this.onDoMergeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoMergeCompleted);
            }
            base.InvokeAsync(this.onBeginDoMergeDelegate, new object[] {
                        タイプ}, this.onEndDoMergeDelegate, this.onDoMergeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult View.Service.File.Reader.IFileReader.BeginGetMEDISデータ最終更新日時(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMEDISデータ最終更新日時(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        View.Service.File.Reader.最終更新日時リターンデータセット View.Service.File.Reader.IFileReader.EndGetMEDISデータ最終更新日時(System.IAsyncResult result) {
            return base.Channel.EndGetMEDISデータ最終更新日時(result);
        }
        
        private System.IAsyncResult OnBeginGetMEDISデータ最終更新日時(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((View.Service.File.Reader.IFileReader)(this)).BeginGetMEDISデータ最終更新日時(callback, asyncState);
        }
        
        private object[] OnEndGetMEDISデータ最終更新日時(System.IAsyncResult result) {
            View.Service.File.Reader.最終更新日時リターンデータセット retVal = ((View.Service.File.Reader.IFileReader)(this)).EndGetMEDISデータ最終更新日時(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMEDISデータ最終更新日時Completed(object state) {
            if ((this.GetMEDISデータ最終更新日時Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMEDISデータ最終更新日時Completed(this, new GetMEDISデータ最終更新日時CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMEDISデータ最終更新日時Async() {
            this.GetMEDISデータ最終更新日時Async(null);
        }
        
        public void GetMEDISデータ最終更新日時Async(object userState) {
            if ((this.onBeginGetMEDISデータ最終更新日時Delegate == null)) {
                this.onBeginGetMEDISデータ最終更新日時Delegate = new BeginOperationDelegate(this.OnBeginGetMEDISデータ最終更新日時);
            }
            if ((this.onEndGetMEDISデータ最終更新日時Delegate == null)) {
                this.onEndGetMEDISデータ最終更新日時Delegate = new EndOperationDelegate(this.OnEndGetMEDISデータ最終更新日時);
            }
            if ((this.onGetMEDISデータ最終更新日時CompletedDelegate == null)) {
                this.onGetMEDISデータ最終更新日時CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMEDISデータ最終更新日時Completed);
            }
            base.InvokeAsync(this.onBeginGetMEDISデータ最終更新日時Delegate, null, this.onEndGetMEDISデータ最終更新日時Delegate, this.onGetMEDISデータ最終更新日時CompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override View.Service.File.Reader.IFileReader CreateChannel() {
            return new FileReaderClientChannel(this);
        }
        
        private class FileReaderClientChannel : ChannelBase<View.Service.File.Reader.IFileReader>, View.Service.File.Reader.IFileReader {
            
            public FileReaderClientChannel(System.ServiceModel.ClientBase<View.Service.File.Reader.IFileReader> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginOpenCSV(string Filepath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = Filepath;
                System.IAsyncResult _result = base.BeginInvoke("OpenCSV", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.現在庫データ> EndOpenCSV(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.現在庫データ> _result = ((System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.現在庫データ>)(base.EndInvoke("OpenCSV", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginOpen使用量CSV(string 検索文字列, bool 全期間, int 期限加算月, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = 検索文字列;
                _args[1] = 全期間;
                _args[2] = 期限加算月;
                System.IAsyncResult _result = base.BeginInvoke("Open使用量CSV", _args, callback, asyncState);
                return _result;
            }
            
            public View.Service.File.Reader.在庫リターンデータセットOf薬局使用量データZYtYGqK_P EndOpen使用量CSV(System.IAsyncResult result) {
                object[] _args = new object[0];
                View.Service.File.Reader.在庫リターンデータセットOf薬局使用量データZYtYGqK_P _result = ((View.Service.File.Reader.在庫リターンデータセットOf薬局使用量データZYtYGqK_P)(base.EndInvoke("Open使用量CSV", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginOpen使用量2CSV(string 検索文字列, bool 全期間, int 期限加算月, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = 検索文字列;
                _args[1] = 全期間;
                _args[2] = 期限加算月;
                System.IAsyncResult _result = base.BeginInvoke("Open使用量2CSV", _args, callback, asyncState);
                return _result;
            }
            
            public View.Service.File.Reader.在庫リターンデータセットOf薬局使用量データZYtYGqK_P EndOpen使用量2CSV(System.IAsyncResult result) {
                object[] _args = new object[0];
                View.Service.File.Reader.在庫リターンデータセットOf薬局使用量データZYtYGqK_P _result = ((View.Service.File.Reader.在庫リターンデータセットOf薬局使用量データZYtYGqK_P)(base.EndInvoke("Open使用量2CSV", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginOpen不動品CSV(string 検索文字列, bool 全期限, bool 期限内, bool 期限切, bool 期限指定か, bool 以内指定か, int 期限加算月, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = 検索文字列;
                _args[1] = 全期限;
                _args[2] = 期限内;
                _args[3] = 期限切;
                _args[4] = 期限指定か;
                _args[5] = 以内指定か;
                _args[6] = 期限加算月;
                System.IAsyncResult _result = base.BeginInvoke("Open不動品CSV", _args, callback, asyncState);
                return _result;
            }
            
            public View.Service.File.Reader.在庫リターンデータセットOf不動品データZYtYGqK_P EndOpen不動品CSV(System.IAsyncResult result) {
                object[] _args = new object[0];
                View.Service.File.Reader.在庫リターンデータセットOf不動品データZYtYGqK_P _result = ((View.Service.File.Reader.在庫リターンデータセットOf不動品データZYtYGqK_P)(base.EndInvoke("Open不動品CSV", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGet現在庫検索データ(string 検索ワード, bool 全期限, bool 期限内, bool 期限切, bool 期限指定か, bool 以内指定か, int 期限加算月, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = 検索ワード;
                _args[1] = 全期限;
                _args[2] = 期限内;
                _args[3] = 期限切;
                _args[4] = 期限指定か;
                _args[5] = 以内指定か;
                _args[6] = 期限加算月;
                System.IAsyncResult _result = base.BeginInvoke("Get現在庫検索データ", _args, callback, asyncState);
                return _result;
            }
            
            public View.Service.File.Reader.在庫リターンデータセットOf現在庫データZYtYGqK_P EndGet現在庫検索データ(System.IAsyncResult result) {
                object[] _args = new object[0];
                View.Service.File.Reader.在庫リターンデータセットOf現在庫データZYtYGqK_P _result = ((View.Service.File.Reader.在庫リターンデータセットOf現在庫データZYtYGqK_P)(base.EndInvoke("Get現在庫検索データ", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGet後発品検索データ(string YJコード, bool 全期限, bool 期限内, bool 期限切, bool 期限指定か, bool 以内指定か, int 期限加算月, bool 他規格剤形も表示する, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = YJコード;
                _args[1] = 全期限;
                _args[2] = 期限内;
                _args[3] = 期限切;
                _args[4] = 期限指定か;
                _args[5] = 以内指定か;
                _args[6] = 期限加算月;
                _args[7] = 他規格剤形も表示する;
                System.IAsyncResult _result = base.BeginInvoke("Get後発品検索データ", _args, callback, asyncState);
                return _result;
            }
            
            public View.Service.File.Reader.在庫リターンデータセットOf現在庫データZYtYGqK_P EndGet後発品検索データ(System.IAsyncResult result) {
                object[] _args = new object[0];
                View.Service.File.Reader.在庫リターンデータセットOf現在庫データZYtYGqK_P _result = ((View.Service.File.Reader.在庫リターンデータセットOf現在庫データZYtYGqK_P)(base.EndInvoke("Get後発品検索データ", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginOpen掲示板データ(string カテゴリ名, int グループNo, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = カテゴリ名;
                _args[1] = グループNo;
                System.IAsyncResult _result = base.BeginInvoke("Open掲示板データ", _args, callback, asyncState);
                return _result;
            }
            
            public View.Service.File.Reader.掲示板リターンデータセット EndOpen掲示板データ(System.IAsyncResult result) {
                object[] _args = new object[0];
                View.Service.File.Reader.掲示板リターンデータセット _result = ((View.Service.File.Reader.掲示板リターンデータセット)(base.EndInvoke("Open掲示板データ", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginOpen掲示板データキーワード検索(string キーワード, string カテゴリ名, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = キーワード;
                _args[1] = カテゴリ名;
                System.IAsyncResult _result = base.BeginInvoke("Open掲示板データキーワード検索", _args, callback, asyncState);
                return _result;
            }
            
            public View.Service.File.Reader.掲示板リターンデータセット EndOpen掲示板データキーワード検索(System.IAsyncResult result) {
                object[] _args = new object[0];
                View.Service.File.Reader.掲示板リターンデータセット _result = ((View.Service.File.Reader.掲示板リターンデータセット)(base.EndInvoke("Open掲示板データキーワード検索", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult Begin掲示板記事修正確認チェック(string カテゴリ名, string 記事No, string 暗証キー, bool 管理者か, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = カテゴリ名;
                _args[1] = 記事No;
                _args[2] = 暗証キー;
                _args[3] = 管理者か;
                System.IAsyncResult _result = base.BeginInvoke("掲示板記事修正確認チェック", _args, callback, asyncState);
                return _result;
            }
            
            public View.Service.File.Reader.掲示板記事修正確認Entity End掲示板記事修正確認チェック(System.IAsyncResult result) {
                object[] _args = new object[0];
                View.Service.File.Reader.掲示板記事修正確認Entity _result = ((View.Service.File.Reader.掲示板記事修正確認Entity)(base.EndInvoke("掲示板記事修正確認チェック", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetThreadTitles(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetThreadTitles", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.ThreadTitlesEntity> EndGetThreadTitles(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.ThreadTitlesEntity> _result = ((System.Collections.ObjectModel.ObservableCollection<View.Service.File.Reader.ThreadTitlesEntity>)(base.EndInvoke("GetThreadTitles", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult Beginテロップ記事読み込み(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("テロップ記事読み込み", _args, callback, asyncState);
                return _result;
            }
            
            public View.Service.File.Reader.テロップ記事リターンEntity Endテロップ記事読み込み(System.IAsyncResult result) {
                object[] _args = new object[0];
                View.Service.File.Reader.テロップ記事リターンEntity _result = ((View.Service.File.Reader.テロップ記事リターンEntity)(base.EndInvoke("テロップ記事読み込み", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDoMerge(View.Service.File.Reader.MergeType タイプ, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = タイプ;
                System.IAsyncResult _result = base.BeginInvoke("DoMerge", _args, callback, asyncState);
                return _result;
            }
            
            public View.Service.File.Reader.在庫MergeリターンEntity EndDoMerge(System.IAsyncResult result) {
                object[] _args = new object[0];
                View.Service.File.Reader.在庫MergeリターンEntity _result = ((View.Service.File.Reader.在庫MergeリターンEntity)(base.EndInvoke("DoMerge", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetMEDISデータ最終更新日時(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetMEDISデータ最終更新日時", _args, callback, asyncState);
                return _result;
            }
            
            public View.Service.File.Reader.最終更新日時リターンデータセット EndGetMEDISデータ最終更新日時(System.IAsyncResult result) {
                object[] _args = new object[0];
                View.Service.File.Reader.最終更新日時リターンデータセット _result = ((View.Service.File.Reader.最終更新日時リターンデータセット)(base.EndInvoke("GetMEDISデータ最終更新日時", _args, result)));
                return _result;
            }
        }
    }
}
