//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.34209
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40818.0
// 
namespace View.Service.File.TreeView {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TreeViewItemData", Namespace="http://schemas.datacontract.org/2004/07/PharmacyTool.Web.Service.File.TreeView")]
    public partial class TreeViewItemData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<View.Service.File.TreeView.TreeViewItemData> ChildrenField;
        
        private string ImageField;
        
        private bool IsDirectoryField;
        
        private string NameField;
        
        private string PathFromRootField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<View.Service.File.TreeView.TreeViewItemData> Children {
            get {
                return this.ChildrenField;
            }
            set {
                if ((object.ReferenceEquals(this.ChildrenField, value) != true)) {
                    this.ChildrenField = value;
                    this.RaisePropertyChanged("Children");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDirectory {
            get {
                return this.IsDirectoryField;
            }
            set {
                if ((this.IsDirectoryField.Equals(value) != true)) {
                    this.IsDirectoryField = value;
                    this.RaisePropertyChanged("IsDirectory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PathFromRoot {
            get {
                return this.PathFromRootField;
            }
            set {
                if ((object.ReferenceEquals(this.PathFromRootField, value) != true)) {
                    this.PathFromRootField = value;
                    this.RaisePropertyChanged("PathFromRoot");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.File.TreeView.ITreeViewManager")]
    public interface ITreeViewManager {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITreeViewManager/Create資料TreeView", ReplyAction="http://tempuri.org/ITreeViewManager/Create資料TreeViewResponse")]
        System.IAsyncResult BeginCreate資料TreeView(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<View.Service.File.TreeView.TreeViewItemData> EndCreate資料TreeView(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITreeViewManagerChannel : View.Service.File.TreeView.ITreeViewManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Create資料TreeViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Create資料TreeViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<View.Service.File.TreeView.TreeViewItemData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<View.Service.File.TreeView.TreeViewItemData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TreeViewManagerClient : System.ServiceModel.ClientBase<View.Service.File.TreeView.ITreeViewManager>, View.Service.File.TreeView.ITreeViewManager {
        
        private BeginOperationDelegate onBeginCreate資料TreeViewDelegate;
        
        private EndOperationDelegate onEndCreate資料TreeViewDelegate;
        
        private System.Threading.SendOrPostCallback onCreate資料TreeViewCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TreeViewManagerClient() {
        }
        
        public TreeViewManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TreeViewManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TreeViewManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TreeViewManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("CookieContainer を設定できません。バインドに HttpCookieContainerBindingElement が含まれていることを確認してくだ" +
                            "さい。");
                }
            }
        }
        
        public event System.EventHandler<Create資料TreeViewCompletedEventArgs> Create資料TreeViewCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult View.Service.File.TreeView.ITreeViewManager.BeginCreate資料TreeView(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreate資料TreeView(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<View.Service.File.TreeView.TreeViewItemData> View.Service.File.TreeView.ITreeViewManager.EndCreate資料TreeView(System.IAsyncResult result) {
            return base.Channel.EndCreate資料TreeView(result);
        }
        
        private System.IAsyncResult OnBeginCreate資料TreeView(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((View.Service.File.TreeView.ITreeViewManager)(this)).BeginCreate資料TreeView(callback, asyncState);
        }
        
        private object[] OnEndCreate資料TreeView(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<View.Service.File.TreeView.TreeViewItemData> retVal = ((View.Service.File.TreeView.ITreeViewManager)(this)).EndCreate資料TreeView(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreate資料TreeViewCompleted(object state) {
            if ((this.Create資料TreeViewCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Create資料TreeViewCompleted(this, new Create資料TreeViewCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Create資料TreeViewAsync() {
            this.Create資料TreeViewAsync(null);
        }
        
        public void Create資料TreeViewAsync(object userState) {
            if ((this.onBeginCreate資料TreeViewDelegate == null)) {
                this.onBeginCreate資料TreeViewDelegate = new BeginOperationDelegate(this.OnBeginCreate資料TreeView);
            }
            if ((this.onEndCreate資料TreeViewDelegate == null)) {
                this.onEndCreate資料TreeViewDelegate = new EndOperationDelegate(this.OnEndCreate資料TreeView);
            }
            if ((this.onCreate資料TreeViewCompletedDelegate == null)) {
                this.onCreate資料TreeViewCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreate資料TreeViewCompleted);
            }
            base.InvokeAsync(this.onBeginCreate資料TreeViewDelegate, null, this.onEndCreate資料TreeViewDelegate, this.onCreate資料TreeViewCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override View.Service.File.TreeView.ITreeViewManager CreateChannel() {
            return new TreeViewManagerClientChannel(this);
        }
        
        private class TreeViewManagerClientChannel : ChannelBase<View.Service.File.TreeView.ITreeViewManager>, View.Service.File.TreeView.ITreeViewManager {
            
            public TreeViewManagerClientChannel(System.ServiceModel.ClientBase<View.Service.File.TreeView.ITreeViewManager> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCreate資料TreeView(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("Create資料TreeView", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<View.Service.File.TreeView.TreeViewItemData> EndCreate資料TreeView(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<View.Service.File.TreeView.TreeViewItemData> _result = ((System.Collections.ObjectModel.ObservableCollection<View.Service.File.TreeView.TreeViewItemData>)(base.EndInvoke("Create資料TreeView", _args, result)));
                return _result;
            }
        }
    }
}
